syntax = "proto3";

package registrator;

option go_package = "github.com/nikita5637/quiz-registrator-api/pkg/pb/registrator;registrator";

import "common/common.proto";
import "google/protobuf/timestamp.proto";

message League {
	int32 id = 1;
	string name = 2;
	string short_name = 3;
	string logo_link = 4;
	string web_site = 5;
}

message Place {
	int32 id = 1;
	string address = 2;
	string name = 3;
	string short_name = 4;
	float latitude = 5;
	float longitude = 6;
	string menu_link = 7;
}

service RegistratorService {
	// AddGame creates a new game
	rpc AddGame(AddGameRequest) returns (AddGameResponse) {
	}

	// AddGames inserts a new games. Used by quiz-fetcher
	rpc AddGames(AddGamesRequest) returns (AddGamesResponse) {
	}

	// CreateUser creates new user
	rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
	}

	// DeleteGame deletes a game by game ID
	rpc DeleteGame(DeleteGameRequest) returns (DeleteGameResponse) {
	}

	// Returns game or Not Found
	rpc GetGameByID(GetGameByIDRequest) returns (GetGameByIDResponse) {
	}

	// GetGames returns games
	rpc GetGames(GetGamesRequest) returns (GetGamesResponse) {
	}

	// GetLeagueByID returns league by league ID
	rpc GetLeagueByID(GetLeagueByIDRequest) returns (GetLeagueByIDResponse) {
	}
	
	// GetPlaceByID returns place by place ID
	rpc GetPlaceByID(GetPlaceByIDRequest) returns (GetPlaceByIDResponse) {
	}

	// GetPlaceByNameAndAddress returns place by name and address
	rpc GetPlaceByNameAndAddress(GetPlaceByNameAndAddressRequest) returns (GetPlaceByNameAndAddressResponse) {
	}

	// GetPlayersByGameID returns list of players by game ID
	rpc GetPlayersByGameID(GetPlayersByGameIDRequest) returns (GetPlayersByGameIDResponse) {
	}

	// GetRegisteredGames returns registered games
	rpc GetRegisteredGames(GetRegisteredGamesRequest) returns (GetRegisteredGamesResponse) {
	}

	// GetUser returns user by headers from context
	rpc GetUser(GetUserRequest) returns (GetUserResponse) {
	}

	// GetUserByID returns user by user ID
	rpc GetUserByID(GetUserByIDRequest) returns (GetUserByIDResponse) {
	}

	// GetUserByTelegramID returns a user by telegram ID
	rpc GetUserByTelegramID(GetUserByTelegramIDRequest) returns (GetUserByTelegramIDResponse) {
	}

	// GetUserGames returns games by user ID
	rpc GetUserGames(GetUserGamesRequest) returns (GetUserGamesResponse) {
	}

	// RegisterGame registers game
	rpc RegisterGame(RegisterGameRequest) returns (RegisterGameResponse) {
	}

	// RegisterPlayer registers player for a game
	rpc RegisterPlayer(RegisterPlayerRequest) returns (RegisterPlayerResponse) {
	}

	// UnregisterGame unregisters game
	rpc UnregisterGame(UnregisterGameRequest) returns (UnregisterGameResponse) {
	}

	// UnregisterPlayer unregisters player
	rpc UnregisterPlayer(UnregisterPlayerRequest) returns (UnregisterPlayerResponse) {
	}

	// UpdateUserEmail updates a user email
	rpc UpdateUserEmail(UpdateUserEmailRequest) returns (UpdateUserEmailResponse) {
	}

	// UpdateUserName updates a user's name
	rpc UpdateUserName(UpdateUserNameRequest) returns (UpdateUserNameResponse) {
	}

	// UpdateUserPhone updates a user's phone
	rpc UpdateUserPhone(UpdateUserPhoneRequest) returns (UpdateUserPhoneResponse) {
	}

	// UpdateUserState updates a user's state
	rpc UpdateUserState(UpdateUserStateRequest) returns (UpdateUserStateResponse) {
	}

	// UpdatePayment updates payment
	rpc UpdatePayment(UpdatePaymentRequest) returns (UpdatePaymentResponse) {
	}
}

message AddGameRequest {
	int32 external_id = 1;
	int32 league_id = 2;
	common.GameType type = 3;
	string number = 4;
	string name = 5;
	int32 place_id = 6;
	google.protobuf.Timestamp date = 7;
	uint32 price = 8;
	string payment_type = 9;
	uint32 max_players = 10;
}

message AddGameResponse {
	int32 id = 1;
}

message AddGamesRequest {
	message Game {
		int32 external_id = 1;
		int32 league_id = 2;
		common.GameType type = 3;
		string number = 4;
		string name = 5;
		int32 place_id = 6;
		google.protobuf.Timestamp date = 7;
		uint32 price = 8;
		string payment_type = 9;
		uint32 max_players = 10;
	}
	repeated Game games = 1;
}

message AddGamesResponse {
}

enum UserState {
	USER_STATE_INVALID = 0;
	USER_STATE_WELCOME = 1;
	USER_STATE_REGISTERED = 2;
	USER_STATE_CHANGING_EMAIL = 3;
	USER_STATE_CHANGING_NAME = 4;
	USER_STATE_CHANGING_PHONE = 5;
	USER_STATE_CHANGING_STATE = 6;
}

message CreateUserRequest {
	string name = 1;
	int64 telegram_id = 2;
	UserState state = 3;
}
  
message CreateUserResponse {
	int32 id = 1;
}
  
message DeleteGameRequest {
	int32 id = 1;
}
  
message DeleteGameResponse {
}

message GetGameByIDRequest {
	int32 game_id = 1;
}
  
message GetGameByIDResponse {
	common.Game game = 1;
}

message GetGamesRequest {
	bool active = 1;
}
  
message GetGamesResponse {
	repeated common.Game games = 1;
}

message GetLeagueByIDRequest {
	int32 id = 1;
}
  
message GetLeagueByIDResponse {
	League league = 1;
}

message GetPlaceByIDRequest {
	int32 id = 1;
}
  
message GetPlaceByIDResponse {
	Place place = 1;
}

message GetPlaceByNameAndAddressRequest {
	string name = 1;
	string address = 2;
}
  
message GetPlaceByNameAndAddressResponse {
	Place place = 1;
}

message Player {
	int32 user_id = 1;
	int32 registered_by = 2;
	Degree degree = 3;
}

message GetPlayersByGameIDRequest {
	int32 game_id = 1;
}

message GetPlayersByGameIDResponse {
	repeated Player players = 1;
}

message GetRegisteredGamesRequest {
	bool active = 1;
}
  
message GetRegisteredGamesResponse {
	repeated common.Game games = 1;
}

message User {
	int32 id = 1;
	string name = 2;
	int64 telegram_id = 3;
	string email = 4;
	string phone = 5;
	UserState state = 6;
}

message GetUserRequest {
}
  
message GetUserResponse {
	User user = 1;
}

message GetUserByIDRequest {
	int32 id = 1;
}
  
message GetUserByIDResponse {
	User user = 1;
}

message GetUserByTelegramIDRequest {
	int64 telegram_id = 1;
}
  
message GetUserByTelegramIDResponse {
	User user = 1;
}

message GetUserGamesRequest {
	bool active = 1;
	int32 user_id = 2;
}
  
message GetUserGamesResponse {
	repeated common.Game games = 1;
}

enum RegisterGameStatus {
	REGISTER_GAME_STATUS_INVALID = 0;
	REGISTER_GAME_STATUS_OK = 1;
	REGISTER_GAME_STATUS_ALREADY_REGISTERED = 2;
}

message RegisterGameRequest {
	int32 game_id = 1;	
}

message RegisterGameResponse {
	RegisterGameStatus status = 1;
}

enum PlayerType {
	PLAYER_TYPE_INVALID = 0;
	PLAYER_TYPE_MAIN = 1;
	PLAYER_TYPE_LEGIONER = 2;
}

enum Degree {
	DEGREE_INVALID = 0;
	DEGREE_LIKELY = 1;
	DEGREE_UNLIKELY = 2;
}

enum RegisterPlayerStatus {
	REGISTER_PLAYER_STATUS_INVALID = 0;
	REGISTER_PLAYER_STATUS_OK = 1;
	REGISTER_PLAYER_STATUS_ALREADY_REGISTERED = 2;
}

message RegisterPlayerRequest {
	int32 game_id = 1;	
	PlayerType player_type = 2;
	Degree degree = 3;
}
  
message RegisterPlayerResponse {
	RegisterPlayerStatus status = 1;
}
  
enum UnregisterGameStatus {
	UNREGISTER_GAME_STATUS_INVALID = 0;
	UNREGISTER_GAME_STATUS_OK = 1;
	UNREGISTER_GAME_STATUS_NOT_REGISTERED = 2;
}

message UnregisterGameRequest {
	int32 game_id = 1;	
}

message UnregisterGameResponse {
	UnregisterGameStatus status = 1;
}

enum UnregisterPlayerStatus {
	UNREGISTER_PLAYER_STATUS_INVALID = 0;
	UNREGISTER_PLAYER_STATUS_OK = 1;
	UNREGISTER_PLAYER_STATUS_NOT_REGISTERED = 2;
}

message UnregisterPlayerRequest {
	int32 game_id = 1;	
	PlayerType player_type = 2;
}
  
message UnregisterPlayerResponse {
	UnregisterPlayerStatus status = 1;
}
  
message UpdatePaymentRequest {
	int32 game_id = 1;
	common.Payment payment = 2;
}

message UpdatePaymentResponse {
}

message UpdateUserEmailRequest {
	int32 user_id = 1;
	string email = 2;
}

message UpdateUserEmailResponse {
}

message UpdateUserNameRequest {
	int32 user_id = 1;
	string name = 2;
}

message UpdateUserNameResponse {
}

message UpdateUserPhoneRequest {
	int32 user_id = 1;
	string phone = 2;
}

message UpdateUserPhoneResponse {
}

message UpdateUserStateRequest {
	int32 user_id = 1;
	UserState state = 2;
}

message UpdateUserStateResponse {
}