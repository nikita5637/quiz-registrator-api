// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: registrator/registrator.proto

package registrator

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RegistratorServiceClient is the client API for RegistratorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistratorServiceClient interface {
	// AddGame creates a new game
	AddGame(ctx context.Context, in *AddGameRequest, opts ...grpc.CallOption) (*AddGameResponse, error)
	// AddGames inserts a new games. Used by quiz-fetcher
	AddGames(ctx context.Context, in *AddGamesRequest, opts ...grpc.CallOption) (*AddGamesResponse, error)
	// CreateUser creates new user
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// DeleteGame deletes a game by game ID
	DeleteGame(ctx context.Context, in *DeleteGameRequest, opts ...grpc.CallOption) (*DeleteGameResponse, error)
	// Returns game or Not Found
	GetGameByID(ctx context.Context, in *GetGameByIDRequest, opts ...grpc.CallOption) (*GetGameByIDResponse, error)
	// GetGames returns games
	GetGames(ctx context.Context, in *GetGamesRequest, opts ...grpc.CallOption) (*GetGamesResponse, error)
	// GetLeagueByID returns league by league ID
	GetLeagueByID(ctx context.Context, in *GetLeagueByIDRequest, opts ...grpc.CallOption) (*GetLeagueByIDResponse, error)
	// GetPlaceByID returns place by place ID
	GetPlaceByID(ctx context.Context, in *GetPlaceByIDRequest, opts ...grpc.CallOption) (*GetPlaceByIDResponse, error)
	// GetPlaceByNameAndAddress returns place by name and address
	GetPlaceByNameAndAddress(ctx context.Context, in *GetPlaceByNameAndAddressRequest, opts ...grpc.CallOption) (*GetPlaceByNameAndAddressResponse, error)
	// GetPlayersByGameID returns list of players by game ID
	GetPlayersByGameID(ctx context.Context, in *GetPlayersByGameIDRequest, opts ...grpc.CallOption) (*GetPlayersByGameIDResponse, error)
	// GetRegisteredGames returns registered games
	GetRegisteredGames(ctx context.Context, in *GetRegisteredGamesRequest, opts ...grpc.CallOption) (*GetRegisteredGamesResponse, error)
	// GetUser returns user by headers from context
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// GetUserByID returns user by user ID
	GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*GetUserByIDResponse, error)
	// GetUserByTelegramID returns a user by telegram ID
	GetUserByTelegramID(ctx context.Context, in *GetUserByTelegramIDRequest, opts ...grpc.CallOption) (*GetUserByTelegramIDResponse, error)
	// GetUserGames returns games by user ID
	GetUserGames(ctx context.Context, in *GetUserGamesRequest, opts ...grpc.CallOption) (*GetUserGamesResponse, error)
	// RegisterGame registers game
	RegisterGame(ctx context.Context, in *RegisterGameRequest, opts ...grpc.CallOption) (*RegisterGameResponse, error)
	// RegisterPlayer registers player for a game
	RegisterPlayer(ctx context.Context, in *RegisterPlayerRequest, opts ...grpc.CallOption) (*RegisterPlayerResponse, error)
	// UnregisterGame unregisters game
	UnregisterGame(ctx context.Context, in *UnregisterGameRequest, opts ...grpc.CallOption) (*UnregisterGameResponse, error)
	// UnregisterPlayer unregisters player
	UnregisterPlayer(ctx context.Context, in *UnregisterPlayerRequest, opts ...grpc.CallOption) (*UnregisterPlayerResponse, error)
	// UpdateUserEmail updates a user email
	UpdateUserEmail(ctx context.Context, in *UpdateUserEmailRequest, opts ...grpc.CallOption) (*UpdateUserEmailResponse, error)
	// UpdateUserName updates a user's name
	UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, opts ...grpc.CallOption) (*UpdateUserNameResponse, error)
	// UpdateUserPhone updates a user's phone
	UpdateUserPhone(ctx context.Context, in *UpdateUserPhoneRequest, opts ...grpc.CallOption) (*UpdateUserPhoneResponse, error)
	// UpdateUserState updates a user's state
	UpdateUserState(ctx context.Context, in *UpdateUserStateRequest, opts ...grpc.CallOption) (*UpdateUserStateResponse, error)
	// UpdatePayment updates payment
	UpdatePayment(ctx context.Context, in *UpdatePaymentRequest, opts ...grpc.CallOption) (*UpdatePaymentResponse, error)
}

type registratorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistratorServiceClient(cc grpc.ClientConnInterface) RegistratorServiceClient {
	return &registratorServiceClient{cc}
}

func (c *registratorServiceClient) AddGame(ctx context.Context, in *AddGameRequest, opts ...grpc.CallOption) (*AddGameResponse, error) {
	out := new(AddGameResponse)
	err := c.cc.Invoke(ctx, "/registrator.RegistratorService/AddGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registratorServiceClient) AddGames(ctx context.Context, in *AddGamesRequest, opts ...grpc.CallOption) (*AddGamesResponse, error) {
	out := new(AddGamesResponse)
	err := c.cc.Invoke(ctx, "/registrator.RegistratorService/AddGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registratorServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/registrator.RegistratorService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registratorServiceClient) DeleteGame(ctx context.Context, in *DeleteGameRequest, opts ...grpc.CallOption) (*DeleteGameResponse, error) {
	out := new(DeleteGameResponse)
	err := c.cc.Invoke(ctx, "/registrator.RegistratorService/DeleteGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registratorServiceClient) GetGameByID(ctx context.Context, in *GetGameByIDRequest, opts ...grpc.CallOption) (*GetGameByIDResponse, error) {
	out := new(GetGameByIDResponse)
	err := c.cc.Invoke(ctx, "/registrator.RegistratorService/GetGameByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registratorServiceClient) GetGames(ctx context.Context, in *GetGamesRequest, opts ...grpc.CallOption) (*GetGamesResponse, error) {
	out := new(GetGamesResponse)
	err := c.cc.Invoke(ctx, "/registrator.RegistratorService/GetGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registratorServiceClient) GetLeagueByID(ctx context.Context, in *GetLeagueByIDRequest, opts ...grpc.CallOption) (*GetLeagueByIDResponse, error) {
	out := new(GetLeagueByIDResponse)
	err := c.cc.Invoke(ctx, "/registrator.RegistratorService/GetLeagueByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registratorServiceClient) GetPlaceByID(ctx context.Context, in *GetPlaceByIDRequest, opts ...grpc.CallOption) (*GetPlaceByIDResponse, error) {
	out := new(GetPlaceByIDResponse)
	err := c.cc.Invoke(ctx, "/registrator.RegistratorService/GetPlaceByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registratorServiceClient) GetPlaceByNameAndAddress(ctx context.Context, in *GetPlaceByNameAndAddressRequest, opts ...grpc.CallOption) (*GetPlaceByNameAndAddressResponse, error) {
	out := new(GetPlaceByNameAndAddressResponse)
	err := c.cc.Invoke(ctx, "/registrator.RegistratorService/GetPlaceByNameAndAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registratorServiceClient) GetPlayersByGameID(ctx context.Context, in *GetPlayersByGameIDRequest, opts ...grpc.CallOption) (*GetPlayersByGameIDResponse, error) {
	out := new(GetPlayersByGameIDResponse)
	err := c.cc.Invoke(ctx, "/registrator.RegistratorService/GetPlayersByGameID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registratorServiceClient) GetRegisteredGames(ctx context.Context, in *GetRegisteredGamesRequest, opts ...grpc.CallOption) (*GetRegisteredGamesResponse, error) {
	out := new(GetRegisteredGamesResponse)
	err := c.cc.Invoke(ctx, "/registrator.RegistratorService/GetRegisteredGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registratorServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/registrator.RegistratorService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registratorServiceClient) GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*GetUserByIDResponse, error) {
	out := new(GetUserByIDResponse)
	err := c.cc.Invoke(ctx, "/registrator.RegistratorService/GetUserByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registratorServiceClient) GetUserByTelegramID(ctx context.Context, in *GetUserByTelegramIDRequest, opts ...grpc.CallOption) (*GetUserByTelegramIDResponse, error) {
	out := new(GetUserByTelegramIDResponse)
	err := c.cc.Invoke(ctx, "/registrator.RegistratorService/GetUserByTelegramID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registratorServiceClient) GetUserGames(ctx context.Context, in *GetUserGamesRequest, opts ...grpc.CallOption) (*GetUserGamesResponse, error) {
	out := new(GetUserGamesResponse)
	err := c.cc.Invoke(ctx, "/registrator.RegistratorService/GetUserGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registratorServiceClient) RegisterGame(ctx context.Context, in *RegisterGameRequest, opts ...grpc.CallOption) (*RegisterGameResponse, error) {
	out := new(RegisterGameResponse)
	err := c.cc.Invoke(ctx, "/registrator.RegistratorService/RegisterGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registratorServiceClient) RegisterPlayer(ctx context.Context, in *RegisterPlayerRequest, opts ...grpc.CallOption) (*RegisterPlayerResponse, error) {
	out := new(RegisterPlayerResponse)
	err := c.cc.Invoke(ctx, "/registrator.RegistratorService/RegisterPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registratorServiceClient) UnregisterGame(ctx context.Context, in *UnregisterGameRequest, opts ...grpc.CallOption) (*UnregisterGameResponse, error) {
	out := new(UnregisterGameResponse)
	err := c.cc.Invoke(ctx, "/registrator.RegistratorService/UnregisterGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registratorServiceClient) UnregisterPlayer(ctx context.Context, in *UnregisterPlayerRequest, opts ...grpc.CallOption) (*UnregisterPlayerResponse, error) {
	out := new(UnregisterPlayerResponse)
	err := c.cc.Invoke(ctx, "/registrator.RegistratorService/UnregisterPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registratorServiceClient) UpdateUserEmail(ctx context.Context, in *UpdateUserEmailRequest, opts ...grpc.CallOption) (*UpdateUserEmailResponse, error) {
	out := new(UpdateUserEmailResponse)
	err := c.cc.Invoke(ctx, "/registrator.RegistratorService/UpdateUserEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registratorServiceClient) UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, opts ...grpc.CallOption) (*UpdateUserNameResponse, error) {
	out := new(UpdateUserNameResponse)
	err := c.cc.Invoke(ctx, "/registrator.RegistratorService/UpdateUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registratorServiceClient) UpdateUserPhone(ctx context.Context, in *UpdateUserPhoneRequest, opts ...grpc.CallOption) (*UpdateUserPhoneResponse, error) {
	out := new(UpdateUserPhoneResponse)
	err := c.cc.Invoke(ctx, "/registrator.RegistratorService/UpdateUserPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registratorServiceClient) UpdateUserState(ctx context.Context, in *UpdateUserStateRequest, opts ...grpc.CallOption) (*UpdateUserStateResponse, error) {
	out := new(UpdateUserStateResponse)
	err := c.cc.Invoke(ctx, "/registrator.RegistratorService/UpdateUserState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registratorServiceClient) UpdatePayment(ctx context.Context, in *UpdatePaymentRequest, opts ...grpc.CallOption) (*UpdatePaymentResponse, error) {
	out := new(UpdatePaymentResponse)
	err := c.cc.Invoke(ctx, "/registrator.RegistratorService/UpdatePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistratorServiceServer is the server API for RegistratorService service.
// All implementations must embed UnimplementedRegistratorServiceServer
// for forward compatibility
type RegistratorServiceServer interface {
	// AddGame creates a new game
	AddGame(context.Context, *AddGameRequest) (*AddGameResponse, error)
	// AddGames inserts a new games. Used by quiz-fetcher
	AddGames(context.Context, *AddGamesRequest) (*AddGamesResponse, error)
	// CreateUser creates new user
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// DeleteGame deletes a game by game ID
	DeleteGame(context.Context, *DeleteGameRequest) (*DeleteGameResponse, error)
	// Returns game or Not Found
	GetGameByID(context.Context, *GetGameByIDRequest) (*GetGameByIDResponse, error)
	// GetGames returns games
	GetGames(context.Context, *GetGamesRequest) (*GetGamesResponse, error)
	// GetLeagueByID returns league by league ID
	GetLeagueByID(context.Context, *GetLeagueByIDRequest) (*GetLeagueByIDResponse, error)
	// GetPlaceByID returns place by place ID
	GetPlaceByID(context.Context, *GetPlaceByIDRequest) (*GetPlaceByIDResponse, error)
	// GetPlaceByNameAndAddress returns place by name and address
	GetPlaceByNameAndAddress(context.Context, *GetPlaceByNameAndAddressRequest) (*GetPlaceByNameAndAddressResponse, error)
	// GetPlayersByGameID returns list of players by game ID
	GetPlayersByGameID(context.Context, *GetPlayersByGameIDRequest) (*GetPlayersByGameIDResponse, error)
	// GetRegisteredGames returns registered games
	GetRegisteredGames(context.Context, *GetRegisteredGamesRequest) (*GetRegisteredGamesResponse, error)
	// GetUser returns user by headers from context
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// GetUserByID returns user by user ID
	GetUserByID(context.Context, *GetUserByIDRequest) (*GetUserByIDResponse, error)
	// GetUserByTelegramID returns a user by telegram ID
	GetUserByTelegramID(context.Context, *GetUserByTelegramIDRequest) (*GetUserByTelegramIDResponse, error)
	// GetUserGames returns games by user ID
	GetUserGames(context.Context, *GetUserGamesRequest) (*GetUserGamesResponse, error)
	// RegisterGame registers game
	RegisterGame(context.Context, *RegisterGameRequest) (*RegisterGameResponse, error)
	// RegisterPlayer registers player for a game
	RegisterPlayer(context.Context, *RegisterPlayerRequest) (*RegisterPlayerResponse, error)
	// UnregisterGame unregisters game
	UnregisterGame(context.Context, *UnregisterGameRequest) (*UnregisterGameResponse, error)
	// UnregisterPlayer unregisters player
	UnregisterPlayer(context.Context, *UnregisterPlayerRequest) (*UnregisterPlayerResponse, error)
	// UpdateUserEmail updates a user email
	UpdateUserEmail(context.Context, *UpdateUserEmailRequest) (*UpdateUserEmailResponse, error)
	// UpdateUserName updates a user's name
	UpdateUserName(context.Context, *UpdateUserNameRequest) (*UpdateUserNameResponse, error)
	// UpdateUserPhone updates a user's phone
	UpdateUserPhone(context.Context, *UpdateUserPhoneRequest) (*UpdateUserPhoneResponse, error)
	// UpdateUserState updates a user's state
	UpdateUserState(context.Context, *UpdateUserStateRequest) (*UpdateUserStateResponse, error)
	// UpdatePayment updates payment
	UpdatePayment(context.Context, *UpdatePaymentRequest) (*UpdatePaymentResponse, error)
	mustEmbedUnimplementedRegistratorServiceServer()
}

// UnimplementedRegistratorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRegistratorServiceServer struct {
}

func (UnimplementedRegistratorServiceServer) AddGame(context.Context, *AddGameRequest) (*AddGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGame not implemented")
}
func (UnimplementedRegistratorServiceServer) AddGames(context.Context, *AddGamesRequest) (*AddGamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGames not implemented")
}
func (UnimplementedRegistratorServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedRegistratorServiceServer) DeleteGame(context.Context, *DeleteGameRequest) (*DeleteGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGame not implemented")
}
func (UnimplementedRegistratorServiceServer) GetGameByID(context.Context, *GetGameByIDRequest) (*GetGameByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameByID not implemented")
}
func (UnimplementedRegistratorServiceServer) GetGames(context.Context, *GetGamesRequest) (*GetGamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGames not implemented")
}
func (UnimplementedRegistratorServiceServer) GetLeagueByID(context.Context, *GetLeagueByIDRequest) (*GetLeagueByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeagueByID not implemented")
}
func (UnimplementedRegistratorServiceServer) GetPlaceByID(context.Context, *GetPlaceByIDRequest) (*GetPlaceByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaceByID not implemented")
}
func (UnimplementedRegistratorServiceServer) GetPlaceByNameAndAddress(context.Context, *GetPlaceByNameAndAddressRequest) (*GetPlaceByNameAndAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaceByNameAndAddress not implemented")
}
func (UnimplementedRegistratorServiceServer) GetPlayersByGameID(context.Context, *GetPlayersByGameIDRequest) (*GetPlayersByGameIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayersByGameID not implemented")
}
func (UnimplementedRegistratorServiceServer) GetRegisteredGames(context.Context, *GetRegisteredGamesRequest) (*GetRegisteredGamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegisteredGames not implemented")
}
func (UnimplementedRegistratorServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedRegistratorServiceServer) GetUserByID(context.Context, *GetUserByIDRequest) (*GetUserByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (UnimplementedRegistratorServiceServer) GetUserByTelegramID(context.Context, *GetUserByTelegramIDRequest) (*GetUserByTelegramIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByTelegramID not implemented")
}
func (UnimplementedRegistratorServiceServer) GetUserGames(context.Context, *GetUserGamesRequest) (*GetUserGamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGames not implemented")
}
func (UnimplementedRegistratorServiceServer) RegisterGame(context.Context, *RegisterGameRequest) (*RegisterGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterGame not implemented")
}
func (UnimplementedRegistratorServiceServer) RegisterPlayer(context.Context, *RegisterPlayerRequest) (*RegisterPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPlayer not implemented")
}
func (UnimplementedRegistratorServiceServer) UnregisterGame(context.Context, *UnregisterGameRequest) (*UnregisterGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterGame not implemented")
}
func (UnimplementedRegistratorServiceServer) UnregisterPlayer(context.Context, *UnregisterPlayerRequest) (*UnregisterPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterPlayer not implemented")
}
func (UnimplementedRegistratorServiceServer) UpdateUserEmail(context.Context, *UpdateUserEmailRequest) (*UpdateUserEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserEmail not implemented")
}
func (UnimplementedRegistratorServiceServer) UpdateUserName(context.Context, *UpdateUserNameRequest) (*UpdateUserNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserName not implemented")
}
func (UnimplementedRegistratorServiceServer) UpdateUserPhone(context.Context, *UpdateUserPhoneRequest) (*UpdateUserPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPhone not implemented")
}
func (UnimplementedRegistratorServiceServer) UpdateUserState(context.Context, *UpdateUserStateRequest) (*UpdateUserStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserState not implemented")
}
func (UnimplementedRegistratorServiceServer) UpdatePayment(context.Context, *UpdatePaymentRequest) (*UpdatePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePayment not implemented")
}
func (UnimplementedRegistratorServiceServer) mustEmbedUnimplementedRegistratorServiceServer() {}

// UnsafeRegistratorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistratorServiceServer will
// result in compilation errors.
type UnsafeRegistratorServiceServer interface {
	mustEmbedUnimplementedRegistratorServiceServer()
}

func RegisterRegistratorServiceServer(s grpc.ServiceRegistrar, srv RegistratorServiceServer) {
	s.RegisterService(&RegistratorService_ServiceDesc, srv)
}

func _RegistratorService_AddGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistratorServiceServer).AddGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrator.RegistratorService/AddGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistratorServiceServer).AddGame(ctx, req.(*AddGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistratorService_AddGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistratorServiceServer).AddGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrator.RegistratorService/AddGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistratorServiceServer).AddGames(ctx, req.(*AddGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistratorService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistratorServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrator.RegistratorService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistratorServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistratorService_DeleteGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistratorServiceServer).DeleteGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrator.RegistratorService/DeleteGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistratorServiceServer).DeleteGame(ctx, req.(*DeleteGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistratorService_GetGameByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistratorServiceServer).GetGameByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrator.RegistratorService/GetGameByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistratorServiceServer).GetGameByID(ctx, req.(*GetGameByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistratorService_GetGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistratorServiceServer).GetGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrator.RegistratorService/GetGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistratorServiceServer).GetGames(ctx, req.(*GetGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistratorService_GetLeagueByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeagueByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistratorServiceServer).GetLeagueByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrator.RegistratorService/GetLeagueByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistratorServiceServer).GetLeagueByID(ctx, req.(*GetLeagueByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistratorService_GetPlaceByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlaceByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistratorServiceServer).GetPlaceByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrator.RegistratorService/GetPlaceByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistratorServiceServer).GetPlaceByID(ctx, req.(*GetPlaceByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistratorService_GetPlaceByNameAndAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlaceByNameAndAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistratorServiceServer).GetPlaceByNameAndAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrator.RegistratorService/GetPlaceByNameAndAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistratorServiceServer).GetPlaceByNameAndAddress(ctx, req.(*GetPlaceByNameAndAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistratorService_GetPlayersByGameID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayersByGameIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistratorServiceServer).GetPlayersByGameID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrator.RegistratorService/GetPlayersByGameID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistratorServiceServer).GetPlayersByGameID(ctx, req.(*GetPlayersByGameIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistratorService_GetRegisteredGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegisteredGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistratorServiceServer).GetRegisteredGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrator.RegistratorService/GetRegisteredGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistratorServiceServer).GetRegisteredGames(ctx, req.(*GetRegisteredGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistratorService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistratorServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrator.RegistratorService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistratorServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistratorService_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistratorServiceServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrator.RegistratorService/GetUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistratorServiceServer).GetUserByID(ctx, req.(*GetUserByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistratorService_GetUserByTelegramID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByTelegramIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistratorServiceServer).GetUserByTelegramID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrator.RegistratorService/GetUserByTelegramID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistratorServiceServer).GetUserByTelegramID(ctx, req.(*GetUserByTelegramIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistratorService_GetUserGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistratorServiceServer).GetUserGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrator.RegistratorService/GetUserGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistratorServiceServer).GetUserGames(ctx, req.(*GetUserGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistratorService_RegisterGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistratorServiceServer).RegisterGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrator.RegistratorService/RegisterGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistratorServiceServer).RegisterGame(ctx, req.(*RegisterGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistratorService_RegisterPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistratorServiceServer).RegisterPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrator.RegistratorService/RegisterPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistratorServiceServer).RegisterPlayer(ctx, req.(*RegisterPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistratorService_UnregisterGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistratorServiceServer).UnregisterGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrator.RegistratorService/UnregisterGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistratorServiceServer).UnregisterGame(ctx, req.(*UnregisterGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistratorService_UnregisterPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistratorServiceServer).UnregisterPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrator.RegistratorService/UnregisterPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistratorServiceServer).UnregisterPlayer(ctx, req.(*UnregisterPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistratorService_UpdateUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistratorServiceServer).UpdateUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrator.RegistratorService/UpdateUserEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistratorServiceServer).UpdateUserEmail(ctx, req.(*UpdateUserEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistratorService_UpdateUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistratorServiceServer).UpdateUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrator.RegistratorService/UpdateUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistratorServiceServer).UpdateUserName(ctx, req.(*UpdateUserNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistratorService_UpdateUserPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistratorServiceServer).UpdateUserPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrator.RegistratorService/UpdateUserPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistratorServiceServer).UpdateUserPhone(ctx, req.(*UpdateUserPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistratorService_UpdateUserState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistratorServiceServer).UpdateUserState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrator.RegistratorService/UpdateUserState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistratorServiceServer).UpdateUserState(ctx, req.(*UpdateUserStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistratorService_UpdatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistratorServiceServer).UpdatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registrator.RegistratorService/UpdatePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistratorServiceServer).UpdatePayment(ctx, req.(*UpdatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegistratorService_ServiceDesc is the grpc.ServiceDesc for RegistratorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegistratorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "registrator.RegistratorService",
	HandlerType: (*RegistratorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddGame",
			Handler:    _RegistratorService_AddGame_Handler,
		},
		{
			MethodName: "AddGames",
			Handler:    _RegistratorService_AddGames_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _RegistratorService_CreateUser_Handler,
		},
		{
			MethodName: "DeleteGame",
			Handler:    _RegistratorService_DeleteGame_Handler,
		},
		{
			MethodName: "GetGameByID",
			Handler:    _RegistratorService_GetGameByID_Handler,
		},
		{
			MethodName: "GetGames",
			Handler:    _RegistratorService_GetGames_Handler,
		},
		{
			MethodName: "GetLeagueByID",
			Handler:    _RegistratorService_GetLeagueByID_Handler,
		},
		{
			MethodName: "GetPlaceByID",
			Handler:    _RegistratorService_GetPlaceByID_Handler,
		},
		{
			MethodName: "GetPlaceByNameAndAddress",
			Handler:    _RegistratorService_GetPlaceByNameAndAddress_Handler,
		},
		{
			MethodName: "GetPlayersByGameID",
			Handler:    _RegistratorService_GetPlayersByGameID_Handler,
		},
		{
			MethodName: "GetRegisteredGames",
			Handler:    _RegistratorService_GetRegisteredGames_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _RegistratorService_GetUser_Handler,
		},
		{
			MethodName: "GetUserByID",
			Handler:    _RegistratorService_GetUserByID_Handler,
		},
		{
			MethodName: "GetUserByTelegramID",
			Handler:    _RegistratorService_GetUserByTelegramID_Handler,
		},
		{
			MethodName: "GetUserGames",
			Handler:    _RegistratorService_GetUserGames_Handler,
		},
		{
			MethodName: "RegisterGame",
			Handler:    _RegistratorService_RegisterGame_Handler,
		},
		{
			MethodName: "RegisterPlayer",
			Handler:    _RegistratorService_RegisterPlayer_Handler,
		},
		{
			MethodName: "UnregisterGame",
			Handler:    _RegistratorService_UnregisterGame_Handler,
		},
		{
			MethodName: "UnregisterPlayer",
			Handler:    _RegistratorService_UnregisterPlayer_Handler,
		},
		{
			MethodName: "UpdateUserEmail",
			Handler:    _RegistratorService_UpdateUserEmail_Handler,
		},
		{
			MethodName: "UpdateUserName",
			Handler:    _RegistratorService_UpdateUserName_Handler,
		},
		{
			MethodName: "UpdateUserPhone",
			Handler:    _RegistratorService_UpdateUserPhone_Handler,
		},
		{
			MethodName: "UpdateUserState",
			Handler:    _RegistratorService_UpdateUserState_Handler,
		},
		{
			MethodName: "UpdatePayment",
			Handler:    _RegistratorService_UpdatePayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registrator/registrator.proto",
}
