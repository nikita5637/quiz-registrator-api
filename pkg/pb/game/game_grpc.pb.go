// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: game/game.proto

package game

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	// BatchGetGames returns games by game IDs
	BatchGetGames(ctx context.Context, in *BatchGetGamesRequest, opts ...grpc.CallOption) (*BatchGetGamesResponse, error)
	// CreateGame creates a new game
	CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*Game, error)
	// DeleteGame deletes game by game ID
	DeleteGame(ctx context.Context, in *DeleteGameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetGame returns game by game ID
	GetGame(ctx context.Context, in *GetGameRequest, opts ...grpc.CallOption) (*Game, error)
	// ListGames returns complete list of games
	ListGames(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListGamesResponse, error)
	// PatchGame patches game
	PatchGame(ctx context.Context, in *PatchGameRequest, opts ...grpc.CallOption) (*Game, error)
	// SearchGamesByLeagueID returns list of games for specified league
	SearchGamesByLeagueID(ctx context.Context, in *SearchGamesByLeagueIDRequest, opts ...grpc.CallOption) (*SearchGamesByLeagueIDResponse, error)
	// SearchPassedAndRegisteredGames returns list of passed and registered games
	SearchPassedAndRegisteredGames(ctx context.Context, in *SearchPassedAndRegisteredGamesRequest, opts ...grpc.CallOption) (*SearchPassedAndRegisteredGamesResponse, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) BatchGetGames(ctx context.Context, in *BatchGetGamesRequest, opts ...grpc.CallOption) (*BatchGetGamesResponse, error) {
	out := new(BatchGetGamesResponse)
	err := c.cc.Invoke(ctx, "/game.Service/BatchGetGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/game.Service/CreateGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteGame(ctx context.Context, in *DeleteGameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/game.Service/DeleteGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetGame(ctx context.Context, in *GetGameRequest, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/game.Service/GetGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListGames(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListGamesResponse, error) {
	out := new(ListGamesResponse)
	err := c.cc.Invoke(ctx, "/game.Service/ListGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PatchGame(ctx context.Context, in *PatchGameRequest, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/game.Service/PatchGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SearchGamesByLeagueID(ctx context.Context, in *SearchGamesByLeagueIDRequest, opts ...grpc.CallOption) (*SearchGamesByLeagueIDResponse, error) {
	out := new(SearchGamesByLeagueIDResponse)
	err := c.cc.Invoke(ctx, "/game.Service/SearchGamesByLeagueID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SearchPassedAndRegisteredGames(ctx context.Context, in *SearchPassedAndRegisteredGamesRequest, opts ...grpc.CallOption) (*SearchPassedAndRegisteredGamesResponse, error) {
	out := new(SearchPassedAndRegisteredGamesResponse)
	err := c.cc.Invoke(ctx, "/game.Service/SearchPassedAndRegisteredGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	// BatchGetGames returns games by game IDs
	BatchGetGames(context.Context, *BatchGetGamesRequest) (*BatchGetGamesResponse, error)
	// CreateGame creates a new game
	CreateGame(context.Context, *CreateGameRequest) (*Game, error)
	// DeleteGame deletes game by game ID
	DeleteGame(context.Context, *DeleteGameRequest) (*emptypb.Empty, error)
	// GetGame returns game by game ID
	GetGame(context.Context, *GetGameRequest) (*Game, error)
	// ListGames returns complete list of games
	ListGames(context.Context, *emptypb.Empty) (*ListGamesResponse, error)
	// PatchGame patches game
	PatchGame(context.Context, *PatchGameRequest) (*Game, error)
	// SearchGamesByLeagueID returns list of games for specified league
	SearchGamesByLeagueID(context.Context, *SearchGamesByLeagueIDRequest) (*SearchGamesByLeagueIDResponse, error)
	// SearchPassedAndRegisteredGames returns list of passed and registered games
	SearchPassedAndRegisteredGames(context.Context, *SearchPassedAndRegisteredGamesRequest) (*SearchPassedAndRegisteredGamesResponse, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) BatchGetGames(context.Context, *BatchGetGamesRequest) (*BatchGetGamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetGames not implemented")
}
func (UnimplementedServiceServer) CreateGame(context.Context, *CreateGameRequest) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGame not implemented")
}
func (UnimplementedServiceServer) DeleteGame(context.Context, *DeleteGameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGame not implemented")
}
func (UnimplementedServiceServer) GetGame(context.Context, *GetGameRequest) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGame not implemented")
}
func (UnimplementedServiceServer) ListGames(context.Context, *emptypb.Empty) (*ListGamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGames not implemented")
}
func (UnimplementedServiceServer) PatchGame(context.Context, *PatchGameRequest) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchGame not implemented")
}
func (UnimplementedServiceServer) SearchGamesByLeagueID(context.Context, *SearchGamesByLeagueIDRequest) (*SearchGamesByLeagueIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGamesByLeagueID not implemented")
}
func (UnimplementedServiceServer) SearchPassedAndRegisteredGames(context.Context, *SearchPassedAndRegisteredGamesRequest) (*SearchPassedAndRegisteredGamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPassedAndRegisteredGames not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_BatchGetGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).BatchGetGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.Service/BatchGetGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).BatchGetGames(ctx, req.(*BatchGetGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CreateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.Service/CreateGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreateGame(ctx, req.(*CreateGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.Service/DeleteGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteGame(ctx, req.(*DeleteGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.Service/GetGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetGame(ctx, req.(*GetGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ListGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.Service/ListGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ListGames(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PatchGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PatchGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.Service/PatchGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PatchGame(ctx, req.(*PatchGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_SearchGamesByLeagueID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchGamesByLeagueIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SearchGamesByLeagueID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.Service/SearchGamesByLeagueID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SearchGamesByLeagueID(ctx, req.(*SearchGamesByLeagueIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_SearchPassedAndRegisteredGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPassedAndRegisteredGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SearchPassedAndRegisteredGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.Service/SearchPassedAndRegisteredGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SearchPassedAndRegisteredGames(ctx, req.(*SearchPassedAndRegisteredGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchGetGames",
			Handler:    _Service_BatchGetGames_Handler,
		},
		{
			MethodName: "CreateGame",
			Handler:    _Service_CreateGame_Handler,
		},
		{
			MethodName: "DeleteGame",
			Handler:    _Service_DeleteGame_Handler,
		},
		{
			MethodName: "GetGame",
			Handler:    _Service_GetGame_Handler,
		},
		{
			MethodName: "ListGames",
			Handler:    _Service_ListGames_Handler,
		},
		{
			MethodName: "PatchGame",
			Handler:    _Service_PatchGame_Handler,
		},
		{
			MethodName: "SearchGamesByLeagueID",
			Handler:    _Service_SearchGamesByLeagueID_Handler,
		},
		{
			MethodName: "SearchPassedAndRegisteredGames",
			Handler:    _Service_SearchPassedAndRegisteredGames_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game/game.proto",
}

// RegistratorServiceClient is the client API for RegistratorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistratorServiceClient interface {
	// RegisterGame registers game by game ID
	RegisterGame(ctx context.Context, in *RegisterGameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UnregisterGame unregisters game by game ID
	UnregisterGame(ctx context.Context, in *UnregisterGameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpdatePayment updates payment by game ID
	UpdatePayment(ctx context.Context, in *UpdatePaymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type registratorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistratorServiceClient(cc grpc.ClientConnInterface) RegistratorServiceClient {
	return &registratorServiceClient{cc}
}

func (c *registratorServiceClient) RegisterGame(ctx context.Context, in *RegisterGameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/game.RegistratorService/RegisterGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registratorServiceClient) UnregisterGame(ctx context.Context, in *UnregisterGameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/game.RegistratorService/UnregisterGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registratorServiceClient) UpdatePayment(ctx context.Context, in *UpdatePaymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/game.RegistratorService/UpdatePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistratorServiceServer is the server API for RegistratorService service.
// All implementations must embed UnimplementedRegistratorServiceServer
// for forward compatibility
type RegistratorServiceServer interface {
	// RegisterGame registers game by game ID
	RegisterGame(context.Context, *RegisterGameRequest) (*emptypb.Empty, error)
	// UnregisterGame unregisters game by game ID
	UnregisterGame(context.Context, *UnregisterGameRequest) (*emptypb.Empty, error)
	// UpdatePayment updates payment by game ID
	UpdatePayment(context.Context, *UpdatePaymentRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedRegistratorServiceServer()
}

// UnimplementedRegistratorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRegistratorServiceServer struct {
}

func (UnimplementedRegistratorServiceServer) RegisterGame(context.Context, *RegisterGameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterGame not implemented")
}
func (UnimplementedRegistratorServiceServer) UnregisterGame(context.Context, *UnregisterGameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterGame not implemented")
}
func (UnimplementedRegistratorServiceServer) UpdatePayment(context.Context, *UpdatePaymentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePayment not implemented")
}
func (UnimplementedRegistratorServiceServer) mustEmbedUnimplementedRegistratorServiceServer() {}

// UnsafeRegistratorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistratorServiceServer will
// result in compilation errors.
type UnsafeRegistratorServiceServer interface {
	mustEmbedUnimplementedRegistratorServiceServer()
}

func RegisterRegistratorServiceServer(s grpc.ServiceRegistrar, srv RegistratorServiceServer) {
	s.RegisterService(&RegistratorService_ServiceDesc, srv)
}

func _RegistratorService_RegisterGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistratorServiceServer).RegisterGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.RegistratorService/RegisterGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistratorServiceServer).RegisterGame(ctx, req.(*RegisterGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistratorService_UnregisterGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistratorServiceServer).UnregisterGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.RegistratorService/UnregisterGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistratorServiceServer).UnregisterGame(ctx, req.(*UnregisterGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistratorService_UpdatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistratorServiceServer).UpdatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.RegistratorService/UpdatePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistratorServiceServer).UpdatePayment(ctx, req.(*UpdatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegistratorService_ServiceDesc is the grpc.ServiceDesc for RegistratorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegistratorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.RegistratorService",
	HandlerType: (*RegistratorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterGame",
			Handler:    _RegistratorService_RegisterGame_Handler,
		},
		{
			MethodName: "UnregisterGame",
			Handler:    _RegistratorService_UnregisterGame_Handler,
		},
		{
			MethodName: "UpdatePayment",
			Handler:    _RegistratorService_UpdatePayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game/game.proto",
}
