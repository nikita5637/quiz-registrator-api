// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/nikita5637/quiz-registrator-api/internal/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// UserStorage is an autogenerated mock type for the UserStorage type
type UserStorage struct {
	mock.Mock
}

type UserStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *UserStorage) EXPECT() *UserStorage_Expecter {
	return &UserStorage_Expecter{mock: &_m.Mock}
}

// GetUserByID provides a mock function with given fields: ctx, userID
func (_m *UserStorage) GetUserByID(ctx context.Context, userID int32) (model.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(context.Context, int32) model.User); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStorage_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type UserStorage_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//  - ctx context.Context
//  - userID int32
func (_e *UserStorage_Expecter) GetUserByID(ctx interface{}, userID interface{}) *UserStorage_GetUserByID_Call {
	return &UserStorage_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, userID)}
}

func (_c *UserStorage_GetUserByID_Call) Run(run func(ctx context.Context, userID int32)) *UserStorage_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *UserStorage_GetUserByID_Call) Return(_a0 model.User, _a1 error) *UserStorage_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetUserByTelegramID provides a mock function with given fields: ctx, telegramID
func (_m *UserStorage) GetUserByTelegramID(ctx context.Context, telegramID int64) (model.User, error) {
	ret := _m.Called(ctx, telegramID)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(context.Context, int64) model.User); ok {
		r0 = rf(ctx, telegramID)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, telegramID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStorage_GetUserByTelegramID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByTelegramID'
type UserStorage_GetUserByTelegramID_Call struct {
	*mock.Call
}

// GetUserByTelegramID is a helper method to define mock.On call
//  - ctx context.Context
//  - telegramID int64
func (_e *UserStorage_Expecter) GetUserByTelegramID(ctx interface{}, telegramID interface{}) *UserStorage_GetUserByTelegramID_Call {
	return &UserStorage_GetUserByTelegramID_Call{Call: _e.mock.On("GetUserByTelegramID", ctx, telegramID)}
}

func (_c *UserStorage_GetUserByTelegramID_Call) Run(run func(ctx context.Context, telegramID int64)) *UserStorage_GetUserByTelegramID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *UserStorage_GetUserByTelegramID_Call) Return(_a0 model.User, _a1 error) *UserStorage_GetUserByTelegramID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Insert provides a mock function with given fields: ctx, user
func (_m *UserStorage) Insert(ctx context.Context, user model.User) (int32, error) {
	ret := _m.Called(ctx, user)

	var r0 int32
	if rf, ok := ret.Get(0).(func(context.Context, model.User) int32); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserStorage_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type UserStorage_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//  - ctx context.Context
//  - user model.User
func (_e *UserStorage_Expecter) Insert(ctx interface{}, user interface{}) *UserStorage_Insert_Call {
	return &UserStorage_Insert_Call{Call: _e.mock.On("Insert", ctx, user)}
}

func (_c *UserStorage_Insert_Call) Run(run func(ctx context.Context, user model.User)) *UserStorage_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.User))
	})
	return _c
}

func (_c *UserStorage_Insert_Call) Return(_a0 int32, _a1 error) *UserStorage_Insert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Update provides a mock function with given fields: ctx, user
func (_m *UserStorage) Update(ctx context.Context, user model.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserStorage_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type UserStorage_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//  - ctx context.Context
//  - user model.User
func (_e *UserStorage_Expecter) Update(ctx interface{}, user interface{}) *UserStorage_Update_Call {
	return &UserStorage_Update_Call{Call: _e.mock.On("Update", ctx, user)}
}

func (_c *UserStorage_Update_Call) Run(run func(ctx context.Context, user model.User)) *UserStorage_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.User))
	})
	return _c
}

func (_c *UserStorage_Update_Call) Return(_a0 error) *UserStorage_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewUserStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserStorage creates a new instance of UserStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserStorage(t mockConstructorTestingTNewUserStorage) *UserStorage {
	mock := &UserStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
