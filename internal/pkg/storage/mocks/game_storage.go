// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	builder "github.com/go-xorm/builder"

	mock "github.com/stretchr/testify/mock"

	model "github.com/nikita5637/quiz-registrator-api/internal/pkg/model"
)

// GameStorage is an autogenerated mock type for the GameStorage type
type GameStorage struct {
	mock.Mock
}

type GameStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *GameStorage) EXPECT() *GameStorage_Expecter {
	return &GameStorage_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, gameID
func (_m *GameStorage) Delete(ctx context.Context, gameID int32) error {
	ret := _m.Called(ctx, gameID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, gameID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GameStorage_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type GameStorage_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//  - ctx context.Context
//  - gameID int32
func (_e *GameStorage_Expecter) Delete(ctx interface{}, gameID interface{}) *GameStorage_Delete_Call {
	return &GameStorage_Delete_Call{Call: _e.mock.On("Delete", ctx, gameID)}
}

func (_c *GameStorage_Delete_Call) Run(run func(ctx context.Context, gameID int32)) *GameStorage_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *GameStorage_Delete_Call) Return(_a0 error) *GameStorage_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

// Find provides a mock function with given fields: ctx, q
func (_m *GameStorage) Find(ctx context.Context, q builder.Cond) ([]model.Game, error) {
	ret := _m.Called(ctx, q)

	var r0 []model.Game
	if rf, ok := ret.Get(0).(func(context.Context, builder.Cond) []model.Game); ok {
		r0 = rf(ctx, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, builder.Cond) error); ok {
		r1 = rf(ctx, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GameStorage_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type GameStorage_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//  - ctx context.Context
//  - q builder.Cond
func (_e *GameStorage_Expecter) Find(ctx interface{}, q interface{}) *GameStorage_Find_Call {
	return &GameStorage_Find_Call{Call: _e.mock.On("Find", ctx, q)}
}

func (_c *GameStorage_Find_Call) Run(run func(ctx context.Context, q builder.Cond)) *GameStorage_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(builder.Cond))
	})
	return _c
}

func (_c *GameStorage_Find_Call) Return(_a0 []model.Game, _a1 error) *GameStorage_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetGameByID provides a mock function with given fields: ctx, id
func (_m *GameStorage) GetGameByID(ctx context.Context, id int32) (model.Game, error) {
	ret := _m.Called(ctx, id)

	var r0 model.Game
	if rf, ok := ret.Get(0).(func(context.Context, int32) model.Game); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Game)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GameStorage_GetGameByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGameByID'
type GameStorage_GetGameByID_Call struct {
	*mock.Call
}

// GetGameByID is a helper method to define mock.On call
//  - ctx context.Context
//  - id int32
func (_e *GameStorage_Expecter) GetGameByID(ctx interface{}, id interface{}) *GameStorage_GetGameByID_Call {
	return &GameStorage_GetGameByID_Call{Call: _e.mock.On("GetGameByID", ctx, id)}
}

func (_c *GameStorage_GetGameByID_Call) Run(run func(ctx context.Context, id int32)) *GameStorage_GetGameByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *GameStorage_GetGameByID_Call) Return(_a0 model.Game, _a1 error) *GameStorage_GetGameByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Insert provides a mock function with given fields: ctx, game
func (_m *GameStorage) Insert(ctx context.Context, game model.Game) (int32, error) {
	ret := _m.Called(ctx, game)

	var r0 int32
	if rf, ok := ret.Get(0).(func(context.Context, model.Game) int32); ok {
		r0 = rf(ctx, game)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Game) error); ok {
		r1 = rf(ctx, game)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GameStorage_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type GameStorage_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//  - ctx context.Context
//  - game model.Game
func (_e *GameStorage_Expecter) Insert(ctx interface{}, game interface{}) *GameStorage_Insert_Call {
	return &GameStorage_Insert_Call{Call: _e.mock.On("Insert", ctx, game)}
}

func (_c *GameStorage_Insert_Call) Run(run func(ctx context.Context, game model.Game)) *GameStorage_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Game))
	})
	return _c
}

func (_c *GameStorage_Insert_Call) Return(_a0 int32, _a1 error) *GameStorage_Insert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Update provides a mock function with given fields: ctx, game
func (_m *GameStorage) Update(ctx context.Context, game model.Game) error {
	ret := _m.Called(ctx, game)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Game) error); ok {
		r0 = rf(ctx, game)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GameStorage_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type GameStorage_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//  - ctx context.Context
//  - game model.Game
func (_e *GameStorage_Expecter) Update(ctx interface{}, game interface{}) *GameStorage_Update_Call {
	return &GameStorage_Update_Call{Call: _e.mock.On("Update", ctx, game)}
}

func (_c *GameStorage_Update_Call) Run(run func(ctx context.Context, game model.Game)) *GameStorage_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Game))
	})
	return _c
}

func (_c *GameStorage_Update_Call) Return(_a0 error) *GameStorage_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewGameStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewGameStorage creates a new instance of GameStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGameStorage(t mockConstructorTestingTNewGameStorage) *GameStorage {
	mock := &GameStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
