// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mysql "github.com/nikita5637/quiz-registrator-api/internal/pkg/storage/mysql"
	mock "github.com/stretchr/testify/mock"
)

// UserRoleStorage is an autogenerated mock type for the UserRoleStorage type
type UserRoleStorage struct {
	mock.Mock
}

type UserRoleStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRoleStorage) EXPECT() *UserRoleStorage_Expecter {
	return &UserRoleStorage_Expecter{mock: &_m.Mock}
}

// DeleteUserRole provides a mock function with given fields: ctx, id
func (_m *UserRoleStorage) DeleteUserRole(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRoleStorage_DeleteUserRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserRole'
type UserRoleStorage_DeleteUserRole_Call struct {
	*mock.Call
}

// DeleteUserRole is a helper method to define mock.On call
//  - ctx context.Context
//  - id int
func (_e *UserRoleStorage_Expecter) DeleteUserRole(ctx interface{}, id interface{}) *UserRoleStorage_DeleteUserRole_Call {
	return &UserRoleStorage_DeleteUserRole_Call{Call: _e.mock.On("DeleteUserRole", ctx, id)}
}

func (_c *UserRoleStorage_DeleteUserRole_Call) Run(run func(ctx context.Context, id int)) *UserRoleStorage_DeleteUserRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *UserRoleStorage_DeleteUserRole_Call) Return(_a0 error) *UserRoleStorage_DeleteUserRole_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetUserRoleByID provides a mock function with given fields: ctx, userRoleID
func (_m *UserRoleStorage) GetUserRoleByID(ctx context.Context, userRoleID int) (*mysql.UserRole, error) {
	ret := _m.Called(ctx, userRoleID)

	var r0 *mysql.UserRole
	if rf, ok := ret.Get(0).(func(context.Context, int) *mysql.UserRole); ok {
		r0 = rf(ctx, userRoleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mysql.UserRole)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userRoleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRoleStorage_GetUserRoleByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRoleByID'
type UserRoleStorage_GetUserRoleByID_Call struct {
	*mock.Call
}

// GetUserRoleByID is a helper method to define mock.On call
//  - ctx context.Context
//  - userRoleID int
func (_e *UserRoleStorage_Expecter) GetUserRoleByID(ctx interface{}, userRoleID interface{}) *UserRoleStorage_GetUserRoleByID_Call {
	return &UserRoleStorage_GetUserRoleByID_Call{Call: _e.mock.On("GetUserRoleByID", ctx, userRoleID)}
}

func (_c *UserRoleStorage_GetUserRoleByID_Call) Run(run func(ctx context.Context, userRoleID int)) *UserRoleStorage_GetUserRoleByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *UserRoleStorage_GetUserRoleByID_Call) Return(_a0 *mysql.UserRole, _a1 error) *UserRoleStorage_GetUserRoleByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetUserRoles provides a mock function with given fields: ctx
func (_m *UserRoleStorage) GetUserRoles(ctx context.Context) ([]mysql.UserRole, error) {
	ret := _m.Called(ctx)

	var r0 []mysql.UserRole
	if rf, ok := ret.Get(0).(func(context.Context) []mysql.UserRole); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mysql.UserRole)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRoleStorage_GetUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRoles'
type UserRoleStorage_GetUserRoles_Call struct {
	*mock.Call
}

// GetUserRoles is a helper method to define mock.On call
//  - ctx context.Context
func (_e *UserRoleStorage_Expecter) GetUserRoles(ctx interface{}) *UserRoleStorage_GetUserRoles_Call {
	return &UserRoleStorage_GetUserRoles_Call{Call: _e.mock.On("GetUserRoles", ctx)}
}

func (_c *UserRoleStorage_GetUserRoles_Call) Run(run func(ctx context.Context)) *UserRoleStorage_GetUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UserRoleStorage_GetUserRoles_Call) Return(_a0 []mysql.UserRole, _a1 error) *UserRoleStorage_GetUserRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetUserRolesByUserID provides a mock function with given fields: ctx, userID
func (_m *UserRoleStorage) GetUserRolesByUserID(ctx context.Context, userID int) ([]mysql.UserRole, error) {
	ret := _m.Called(ctx, userID)

	var r0 []mysql.UserRole
	if rf, ok := ret.Get(0).(func(context.Context, int) []mysql.UserRole); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mysql.UserRole)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRoleStorage_GetUserRolesByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRolesByUserID'
type UserRoleStorage_GetUserRolesByUserID_Call struct {
	*mock.Call
}

// GetUserRolesByUserID is a helper method to define mock.On call
//  - ctx context.Context
//  - userID int
func (_e *UserRoleStorage_Expecter) GetUserRolesByUserID(ctx interface{}, userID interface{}) *UserRoleStorage_GetUserRolesByUserID_Call {
	return &UserRoleStorage_GetUserRolesByUserID_Call{Call: _e.mock.On("GetUserRolesByUserID", ctx, userID)}
}

func (_c *UserRoleStorage_GetUserRolesByUserID_Call) Run(run func(ctx context.Context, userID int)) *UserRoleStorage_GetUserRolesByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *UserRoleStorage_GetUserRolesByUserID_Call) Return(_a0 []mysql.UserRole, _a1 error) *UserRoleStorage_GetUserRolesByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Insert provides a mock function with given fields: ctx, userRole
func (_m *UserRoleStorage) Insert(ctx context.Context, userRole mysql.UserRole) (int, error) {
	ret := _m.Called(ctx, userRole)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, mysql.UserRole) int); ok {
		r0 = rf(ctx, userRole)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, mysql.UserRole) error); ok {
		r1 = rf(ctx, userRole)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRoleStorage_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type UserRoleStorage_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//  - ctx context.Context
//  - userRole mysql.UserRole
func (_e *UserRoleStorage_Expecter) Insert(ctx interface{}, userRole interface{}) *UserRoleStorage_Insert_Call {
	return &UserRoleStorage_Insert_Call{Call: _e.mock.On("Insert", ctx, userRole)}
}

func (_c *UserRoleStorage_Insert_Call) Run(run func(ctx context.Context, userRole mysql.UserRole)) *UserRoleStorage_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(mysql.UserRole))
	})
	return _c
}

func (_c *UserRoleStorage_Insert_Call) Return(_a0 int, _a1 error) *UserRoleStorage_Insert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewUserRoleStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRoleStorage creates a new instance of UserRoleStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRoleStorage(t mockConstructorTestingTNewUserRoleStorage) *UserRoleStorage {
	mock := &UserRoleStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
