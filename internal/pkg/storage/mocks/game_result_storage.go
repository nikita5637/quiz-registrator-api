// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/nikita5637/quiz-registrator-api/internal/pkg/model"
	mock "github.com/stretchr/testify/mock"

	mysql "github.com/nikita5637/quiz-registrator-api/internal/pkg/storage/mysql"
)

// GameResultStorage is an autogenerated mock type for the GameResultStorage type
type GameResultStorage struct {
	mock.Mock
}

type GameResultStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *GameResultStorage) EXPECT() *GameResultStorage_Expecter {
	return &GameResultStorage_Expecter{mock: &_m.Mock}
}

// CreateGameResult provides a mock function with given fields: ctx, dbGameResult
func (_m *GameResultStorage) CreateGameResult(ctx context.Context, dbGameResult mysql.GameResult) (int, error) {
	ret := _m.Called(ctx, dbGameResult)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, mysql.GameResult) (int, error)); ok {
		return rf(ctx, dbGameResult)
	}
	if rf, ok := ret.Get(0).(func(context.Context, mysql.GameResult) int); ok {
		r0 = rf(ctx, dbGameResult)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, mysql.GameResult) error); ok {
		r1 = rf(ctx, dbGameResult)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GameResultStorage_CreateGameResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGameResult'
type GameResultStorage_CreateGameResult_Call struct {
	*mock.Call
}

// CreateGameResult is a helper method to define mock.On call
//   - ctx context.Context
//   - dbGameResult mysql.GameResult
func (_e *GameResultStorage_Expecter) CreateGameResult(ctx interface{}, dbGameResult interface{}) *GameResultStorage_CreateGameResult_Call {
	return &GameResultStorage_CreateGameResult_Call{Call: _e.mock.On("CreateGameResult", ctx, dbGameResult)}
}

func (_c *GameResultStorage_CreateGameResult_Call) Run(run func(ctx context.Context, dbGameResult mysql.GameResult)) *GameResultStorage_CreateGameResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(mysql.GameResult))
	})
	return _c
}

func (_c *GameResultStorage_CreateGameResult_Call) Return(_a0 int, _a1 error) *GameResultStorage_CreateGameResult_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GameResultStorage_CreateGameResult_Call) RunAndReturn(run func(context.Context, mysql.GameResult) (int, error)) *GameResultStorage_CreateGameResult_Call {
	_c.Call.Return(run)
	return _c
}

// GetGameResultByFkGameID provides a mock function with given fields: ctx, fkGameID
func (_m *GameResultStorage) GetGameResultByFkGameID(ctx context.Context, fkGameID int) (model.GameResult, error) {
	ret := _m.Called(ctx, fkGameID)

	var r0 model.GameResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (model.GameResult, error)); ok {
		return rf(ctx, fkGameID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) model.GameResult); ok {
		r0 = rf(ctx, fkGameID)
	} else {
		r0 = ret.Get(0).(model.GameResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, fkGameID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GameResultStorage_GetGameResultByFkGameID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGameResultByFkGameID'
type GameResultStorage_GetGameResultByFkGameID_Call struct {
	*mock.Call
}

// GetGameResultByFkGameID is a helper method to define mock.On call
//   - ctx context.Context
//   - fkGameID int
func (_e *GameResultStorage_Expecter) GetGameResultByFkGameID(ctx interface{}, fkGameID interface{}) *GameResultStorage_GetGameResultByFkGameID_Call {
	return &GameResultStorage_GetGameResultByFkGameID_Call{Call: _e.mock.On("GetGameResultByFkGameID", ctx, fkGameID)}
}

func (_c *GameResultStorage_GetGameResultByFkGameID_Call) Run(run func(ctx context.Context, fkGameID int)) *GameResultStorage_GetGameResultByFkGameID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *GameResultStorage_GetGameResultByFkGameID_Call) Return(_a0 model.GameResult, _a1 error) *GameResultStorage_GetGameResultByFkGameID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GameResultStorage_GetGameResultByFkGameID_Call) RunAndReturn(run func(context.Context, int) (model.GameResult, error)) *GameResultStorage_GetGameResultByFkGameID_Call {
	_c.Call.Return(run)
	return _c
}

// GetGameResultByID provides a mock function with given fields: ctx, id
func (_m *GameResultStorage) GetGameResultByID(ctx context.Context, id int) (*mysql.GameResult, error) {
	ret := _m.Called(ctx, id)

	var r0 *mysql.GameResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*mysql.GameResult, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *mysql.GameResult); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mysql.GameResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GameResultStorage_GetGameResultByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGameResultByID'
type GameResultStorage_GetGameResultByID_Call struct {
	*mock.Call
}

// GetGameResultByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *GameResultStorage_Expecter) GetGameResultByID(ctx interface{}, id interface{}) *GameResultStorage_GetGameResultByID_Call {
	return &GameResultStorage_GetGameResultByID_Call{Call: _e.mock.On("GetGameResultByID", ctx, id)}
}

func (_c *GameResultStorage_GetGameResultByID_Call) Run(run func(ctx context.Context, id int)) *GameResultStorage_GetGameResultByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *GameResultStorage_GetGameResultByID_Call) Return(_a0 *mysql.GameResult, _a1 error) *GameResultStorage_GetGameResultByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GameResultStorage_GetGameResultByID_Call) RunAndReturn(run func(context.Context, int) (*mysql.GameResult, error)) *GameResultStorage_GetGameResultByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetGameResults provides a mock function with given fields: ctx
func (_m *GameResultStorage) GetGameResults(ctx context.Context) ([]mysql.GameResult, error) {
	ret := _m.Called(ctx)

	var r0 []mysql.GameResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]mysql.GameResult, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []mysql.GameResult); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mysql.GameResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GameResultStorage_GetGameResults_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGameResults'
type GameResultStorage_GetGameResults_Call struct {
	*mock.Call
}

// GetGameResults is a helper method to define mock.On call
//   - ctx context.Context
func (_e *GameResultStorage_Expecter) GetGameResults(ctx interface{}) *GameResultStorage_GetGameResults_Call {
	return &GameResultStorage_GetGameResults_Call{Call: _e.mock.On("GetGameResults", ctx)}
}

func (_c *GameResultStorage_GetGameResults_Call) Run(run func(ctx context.Context)) *GameResultStorage_GetGameResults_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *GameResultStorage_GetGameResults_Call) Return(_a0 []mysql.GameResult, _a1 error) *GameResultStorage_GetGameResults_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GameResultStorage_GetGameResults_Call) RunAndReturn(run func(context.Context) ([]mysql.GameResult, error)) *GameResultStorage_GetGameResults_Call {
	_c.Call.Return(run)
	return _c
}

// PatchGameResult provides a mock function with given fields: ctx, dbGameResult
func (_m *GameResultStorage) PatchGameResult(ctx context.Context, dbGameResult mysql.GameResult) error {
	ret := _m.Called(ctx, dbGameResult)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, mysql.GameResult) error); ok {
		r0 = rf(ctx, dbGameResult)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GameResultStorage_PatchGameResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchGameResult'
type GameResultStorage_PatchGameResult_Call struct {
	*mock.Call
}

// PatchGameResult is a helper method to define mock.On call
//   - ctx context.Context
//   - dbGameResult mysql.GameResult
func (_e *GameResultStorage_Expecter) PatchGameResult(ctx interface{}, dbGameResult interface{}) *GameResultStorage_PatchGameResult_Call {
	return &GameResultStorage_PatchGameResult_Call{Call: _e.mock.On("PatchGameResult", ctx, dbGameResult)}
}

func (_c *GameResultStorage_PatchGameResult_Call) Run(run func(ctx context.Context, dbGameResult mysql.GameResult)) *GameResultStorage_PatchGameResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(mysql.GameResult))
	})
	return _c
}

func (_c *GameResultStorage_PatchGameResult_Call) Return(_a0 error) *GameResultStorage_PatchGameResult_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GameResultStorage_PatchGameResult_Call) RunAndReturn(run func(context.Context, mysql.GameResult) error) *GameResultStorage_PatchGameResult_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewGameResultStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewGameResultStorage creates a new instance of GameResultStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGameResultStorage(t mockConstructorTestingTNewGameResultStorage) *GameResultStorage {
	mock := &GameResultStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
