// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/nikita5637/quiz-registrator-api/internal/pkg/model"
	mock "github.com/stretchr/testify/mock"

	mysql "github.com/nikita5637/quiz-registrator-api/internal/pkg/storage/mysql"
)

// PlaceStorage is an autogenerated mock type for the PlaceStorage type
type PlaceStorage struct {
	mock.Mock
}

type PlaceStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *PlaceStorage) EXPECT() *PlaceStorage_Expecter {
	return &PlaceStorage_Expecter{mock: &_m.Mock}
}

// CreatePlace provides a mock function with given fields: ctx, place
func (_m *PlaceStorage) CreatePlace(ctx context.Context, place mysql.Place) (int, error) {
	ret := _m.Called(ctx, place)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, mysql.Place) int); ok {
		r0 = rf(ctx, place)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, mysql.Place) error); ok {
		r1 = rf(ctx, place)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlaceStorage_CreatePlace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePlace'
type PlaceStorage_CreatePlace_Call struct {
	*mock.Call
}

// CreatePlace is a helper method to define mock.On call
//  - ctx context.Context
//  - place mysql.Place
func (_e *PlaceStorage_Expecter) CreatePlace(ctx interface{}, place interface{}) *PlaceStorage_CreatePlace_Call {
	return &PlaceStorage_CreatePlace_Call{Call: _e.mock.On("CreatePlace", ctx, place)}
}

func (_c *PlaceStorage_CreatePlace_Call) Run(run func(ctx context.Context, place mysql.Place)) *PlaceStorage_CreatePlace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(mysql.Place))
	})
	return _c
}

func (_c *PlaceStorage_CreatePlace_Call) Return(_a0 int, _a1 error) *PlaceStorage_CreatePlace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetPlaceByID provides a mock function with given fields: ctx, id
func (_m *PlaceStorage) GetPlaceByID(ctx context.Context, id int32) (model.Place, error) {
	ret := _m.Called(ctx, id)

	var r0 model.Place
	if rf, ok := ret.Get(0).(func(context.Context, int32) model.Place); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Place)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlaceStorage_GetPlaceByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlaceByID'
type PlaceStorage_GetPlaceByID_Call struct {
	*mock.Call
}

// GetPlaceByID is a helper method to define mock.On call
//  - ctx context.Context
//  - id int32
func (_e *PlaceStorage_Expecter) GetPlaceByID(ctx interface{}, id interface{}) *PlaceStorage_GetPlaceByID_Call {
	return &PlaceStorage_GetPlaceByID_Call{Call: _e.mock.On("GetPlaceByID", ctx, id)}
}

func (_c *PlaceStorage_GetPlaceByID_Call) Run(run func(ctx context.Context, id int32)) *PlaceStorage_GetPlaceByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *PlaceStorage_GetPlaceByID_Call) Return(_a0 model.Place, _a1 error) *PlaceStorage_GetPlaceByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewPlaceStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewPlaceStorage creates a new instance of PlaceStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPlaceStorage(t mockConstructorTestingTNewPlaceStorage) *PlaceStorage {
	mock := &PlaceStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
