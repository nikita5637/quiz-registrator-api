// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mysql "github.com/nikita5637/quiz-registrator-api/internal/pkg/storage/mysql"
	mock "github.com/stretchr/testify/mock"
)

// LogStorage is an autogenerated mock type for the LogStorage type
type LogStorage struct {
	mock.Mock
}

type LogStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *LogStorage) EXPECT() *LogStorage_Expecter {
	return &LogStorage_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, log
func (_m *LogStorage) Create(ctx context.Context, log mysql.Log) error {
	ret := _m.Called(ctx, log)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, mysql.Log) error); ok {
		r0 = rf(ctx, log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogStorage_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type LogStorage_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - log mysql.Log
func (_e *LogStorage_Expecter) Create(ctx interface{}, log interface{}) *LogStorage_Create_Call {
	return &LogStorage_Create_Call{Call: _e.mock.On("Create", ctx, log)}
}

func (_c *LogStorage_Create_Call) Run(run func(ctx context.Context, log mysql.Log)) *LogStorage_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(mysql.Log))
	})
	return _c
}

func (_c *LogStorage_Create_Call) Return(_a0 error) *LogStorage_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogStorage_Create_Call) RunAndReturn(run func(context.Context, mysql.Log) error) *LogStorage_Create_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewLogStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewLogStorage creates a new instance of LogStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLogStorage(t mockConstructorTestingTNewLogStorage) *LogStorage {
	mock := &LogStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
