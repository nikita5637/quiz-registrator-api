// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mysql "github.com/nikita5637/quiz-registrator-api/internal/pkg/storage/mysql"
	mock "github.com/stretchr/testify/mock"
)

// MathProblemStorage is an autogenerated mock type for the MathProblemStorage type
type MathProblemStorage struct {
	mock.Mock
}

type MathProblemStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MathProblemStorage) EXPECT() *MathProblemStorage_Expecter {
	return &MathProblemStorage_Expecter{mock: &_m.Mock}
}

// CreateMathProblem provides a mock function with given fields: ctx, mathProblem
func (_m *MathProblemStorage) CreateMathProblem(ctx context.Context, mathProblem mysql.MathProblem) (int, error) {
	ret := _m.Called(ctx, mathProblem)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, mysql.MathProblem) int); ok {
		r0 = rf(ctx, mathProblem)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, mysql.MathProblem) error); ok {
		r1 = rf(ctx, mathProblem)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MathProblemStorage_CreateMathProblem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMathProblem'
type MathProblemStorage_CreateMathProblem_Call struct {
	*mock.Call
}

// CreateMathProblem is a helper method to define mock.On call
//  - ctx context.Context
//  - mathProblem mysql.MathProblem
func (_e *MathProblemStorage_Expecter) CreateMathProblem(ctx interface{}, mathProblem interface{}) *MathProblemStorage_CreateMathProblem_Call {
	return &MathProblemStorage_CreateMathProblem_Call{Call: _e.mock.On("CreateMathProblem", ctx, mathProblem)}
}

func (_c *MathProblemStorage_CreateMathProblem_Call) Run(run func(ctx context.Context, mathProblem mysql.MathProblem)) *MathProblemStorage_CreateMathProblem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(mysql.MathProblem))
	})
	return _c
}

func (_c *MathProblemStorage_CreateMathProblem_Call) Return(_a0 int, _a1 error) *MathProblemStorage_CreateMathProblem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetMathProblemByGameID provides a mock function with given fields: ctx, gameID
func (_m *MathProblemStorage) GetMathProblemByGameID(ctx context.Context, gameID int) ([]*mysql.MathProblem, error) {
	ret := _m.Called(ctx, gameID)

	var r0 []*mysql.MathProblem
	if rf, ok := ret.Get(0).(func(context.Context, int) []*mysql.MathProblem); ok {
		r0 = rf(ctx, gameID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*mysql.MathProblem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, gameID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MathProblemStorage_GetMathProblemByGameID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMathProblemByGameID'
type MathProblemStorage_GetMathProblemByGameID_Call struct {
	*mock.Call
}

// GetMathProblemByGameID is a helper method to define mock.On call
//  - ctx context.Context
//  - gameID int
func (_e *MathProblemStorage_Expecter) GetMathProblemByGameID(ctx interface{}, gameID interface{}) *MathProblemStorage_GetMathProblemByGameID_Call {
	return &MathProblemStorage_GetMathProblemByGameID_Call{Call: _e.mock.On("GetMathProblemByGameID", ctx, gameID)}
}

func (_c *MathProblemStorage_GetMathProblemByGameID_Call) Run(run func(ctx context.Context, gameID int)) *MathProblemStorage_GetMathProblemByGameID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MathProblemStorage_GetMathProblemByGameID_Call) Return(_a0 []*mysql.MathProblem, _a1 error) *MathProblemStorage_GetMathProblemByGameID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewMathProblemStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewMathProblemStorage creates a new instance of MathProblemStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMathProblemStorage(t mockConstructorTestingTNewMathProblemStorage) *MathProblemStorage {
	mock := &MathProblemStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
