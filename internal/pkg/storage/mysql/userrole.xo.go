package mysql

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"

	"github.com/go-xorm/builder"
	"github.com/nikita5637/quiz-registrator-api/internal/pkg/logger"

	"github.com/nikita5637/quiz-registrator-api/internal/pkg/tx"
)

// UserRole represents a row from 'user_role'.
type UserRole struct {
	ID        int          `json:"id"`         // id
	FkUserID  int          `json:"fk_user_id"` // fk_user_id
	Role      Role         `json:"role"`       // role
	CreatedAt sql.NullTime `json:"created_at"` // created_at
	DeletedAt sql.NullTime `json:"deleted_at"` // deleted_at
}

// UserRoleStorage is UserRole service implementation
type UserRoleStorage struct {
	db *tx.Manager
}

// NewUserRoleStorage creates new instance of UserRoleStorage
func NewUserRoleStorage(txManager *tx.Manager) *UserRoleStorage {
	return &UserRoleStorage{
		db: txManager,
	}
}

// GetAll returns all records
func (s *UserRoleStorage) GetAll(ctx context.Context) ([]UserRole, error) {
	return s.Find(ctx, nil, "")
}

// Find perform find request by params
func (s *UserRoleStorage) Find(ctx context.Context, q builder.Cond, sort string) ([]UserRole, error) {
	query := `SELECT id, fk_user_id, role, created_at, deleted_at FROM user_role`

	var args []interface{}

	if q != nil {
		var where string
		var err error
		where, args, err = builder.ToSQL(q)
		if err != nil {
			return nil, err
		}
		query += ` WHERE ` + where
	}

	if sort != "" {
		query += ` ` + getOrderStmt(sort)
	}

	rows, err := s.db.Sync(ctx).QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var items []UserRole

	for rows.Next() {
		var item UserRole
		if err := rows.Scan(
			&item.ID,
			&item.FkUserID,
			&item.Role,
			&item.CreatedAt,
			&item.DeletedAt,
		); err != nil {
			return nil, err
		}

		items = append(items, item)
	}

	return items, nil
}

// FindWithLimit perform find request by params, offset and limit
func (s *UserRoleStorage) FindWithLimit(ctx context.Context, q builder.Cond, sort string, offset, limit uint64) ([]UserRole, error) {
	query := `SELECT id, fk_user_id, role, created_at, deleted_at FROM user_role`

	var args []interface{}

	if q != nil {
		var where string
		var err error
		where, args, err = builder.ToSQL(q)
		if err != nil {
			return nil, err
		}
		query += ` WHERE ` + where
	}

	if sort != "" {
		query += ` ` + getOrderStmt(sort)
	}

	if limit != 0 {
		query += ` LIMIT ? OFFSET ?`
		args = append(args, limit)
		args = append(args, offset)
	}

	rows, err := s.db.Sync(ctx).QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var items []UserRole

	for rows.Next() {
		var item UserRole
		if err := rows.Scan(
			&item.ID,
			&item.FkUserID,
			&item.Role,
			&item.CreatedAt,
			&item.DeletedAt,
		); err != nil {
			return nil, err
		}

		items = append(items, item)
	}

	return items, nil
}

// Total return count(*) by params
func (s *UserRoleStorage) Total(ctx context.Context, q builder.Cond) (uint64, error) {
	query := `SELECT count(*) FROM user_role`

	var args []interface{}

	if q != nil {
		var where string
		var err error
		where, args, err = builder.ToSQL(q)
		if err != nil {
			return 0, err
		}
		query += ` WHERE ` + where
	}

	rows, err := s.db.Sync(ctx).QueryContext(ctx, query, args...)
	if err != nil {
		return 0, err
	}
	defer rows.Close()

	var count uint64

	for rows.Next() {
		if err := rows.Scan(
			&count,
		); err != nil {
			return 0, err
		}
	}

	return count, nil
}

// Insert inserts the UserRole to the database.
func (s *UserRoleStorage) Insert(ctx context.Context, item UserRole) (int, error) {
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO user_role (` +
		`fk_user_id, role, created_at` +
		`) VALUES (` +
		`?, ?, UTC_TIMESTAMP()` +
		`)`
	// run
	logger.Debugf(ctx, sqlstr, item.FkUserID, item.Role)

	res, err := s.db.Master(ctx).ExecContext(ctx, sqlstr, item.FkUserID, item.Role)
	if err != nil {
		return 0, err
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return 0, err
	}

	return int(id), nil
}

// Update updates a UserRole in the database.
func (s *UserRoleStorage) Update(ctx context.Context, item UserRole) error {
	// update with primary key
	const sqlstr = `UPDATE user_role SET ` +
		`fk_user_id = ?, role = ? ` +
		`WHERE id = ?`
	// run
	logger.Debugf(ctx, sqlstr, item.FkUserID, item.Role, item.ID)
	if _, err := s.db.Master(ctx).ExecContext(ctx, sqlstr, item.FkUserID, item.Role, item.ID); err != nil {
		return err
	}

	return nil
}

// Upsert performs an upsert for UserRole.
func (s *UserRoleStorage) Upsert(ctx context.Context, item UserRole) error {
	// upsert
	const sqlstr = `INSERT INTO user_role (` +
		`id, fk_user_id, role, created_at` +
		`) VALUES (` +
		`?, ?, ?, UTC_TIMESTAMP()` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`fk_user_id = VALUES(fk_user_id), role = VALUES(role), created_at = VALUES(created_at), deleted_at = VALUES(deleted_at)`
	// run
	logger.Debugf(ctx, sqlstr, item.ID, item.FkUserID, item.Role, item.CreatedAt, item.DeletedAt)
	if _, err := s.db.Master(ctx).ExecContext(ctx, sqlstr, item.ID, item.FkUserID, item.Role); err != nil {
		return err
	}

	return nil
}

// Delete deletes the UserRole from the database.
func (s *UserRoleStorage) Delete(ctx context.Context, id int) error {
	// update with primary key
	const sqlstr = `UPDATE user_role SET deleted_at = UTC_TIMESTAMP() WHERE id = ?`
	// run
	logger.Debugf(ctx, sqlstr, id)

	if _, err := s.db.Master(ctx).ExecContext(ctx, sqlstr, id); err != nil {
		return err
	}

	return nil
}

// GetUserRoleByFkUserID retrieves a row from 'user_role' as a UserRole.
//
// Generated from index 'fk_user_id'.
func (s *UserRoleStorage) GetUserRoleByFkUserID(ctx context.Context, fkUserID int) ([]*UserRole, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, fk_user_id, role, created_at, deleted_at ` +
		`FROM user_role ` +
		`WHERE fk_user_id = ?`
	// run
	logger.Debugf(ctx, sqlstr, fkUserID)
	rows, err := s.db.Sync(ctx).QueryContext(ctx, sqlstr, fkUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	// process
	var res []*UserRole
	for rows.Next() {
		ur := UserRole{}
		// scan
		if err := rows.Scan(&ur.ID, &ur.FkUserID, &ur.Role, &ur.CreatedAt, &ur.DeletedAt); err != nil {
			return nil, err
		}
		res = append(res, &ur)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}

	return res, nil
}

// GetUserRoleByID retrieves a row from 'user_role' as a UserRole.
//
// Generated from index 'user_role_id_pkey'.
func (s *UserRoleStorage) GetUserRoleByID(ctx context.Context, id int) (*UserRole, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, fk_user_id, role, created_at, deleted_at ` +
		`FROM user_role ` +
		`WHERE id = ?`
	// run
	logger.Debugf(ctx, sqlstr, id)
	ur := UserRole{}
	if err := s.db.Sync(ctx).QueryRowContext(ctx, sqlstr, id).Scan(&ur.ID, &ur.FkUserID, &ur.Role, &ur.CreatedAt, &ur.DeletedAt); err != nil {
		return nil, err
	}
	return &ur, nil
}
