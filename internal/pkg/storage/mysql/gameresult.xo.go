package mysql

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"

	"github.com/go-xorm/builder"
	"github.com/nikita5637/quiz-registrator-api/internal/pkg/logger"

	"github.com/nikita5637/quiz-registrator-api/internal/pkg/tx"
)

// GameResult represents a row from 'game_result'.
type GameResult struct {
	ID       int            `json:"id"`         // id
	FkGameID int            `json:"fk_game_id"` // fk_game_id
	Place    uint8          `json:"place"`      // place
	Points   sql.NullString `json:"points"`     // points
}

// GameResultStorage is GameResult service implementation
type GameResultStorage struct {
	db *tx.Manager
}

// NewGameResultStorage creates new instance of GameResultStorage
func NewGameResultStorage(txManager *tx.Manager) *GameResultStorage {
	return &GameResultStorage{
		db: txManager,
	}
}

// GetAll returns all records
func (s *GameResultStorage) GetAll(ctx context.Context) ([]GameResult, error) {
	return s.Find(ctx, nil, "")
}

// Find perform find request by params
func (s *GameResultStorage) Find(ctx context.Context, q builder.Cond, sort string) ([]GameResult, error) {
	query := `SELECT id, fk_game_id, place, points FROM game_result`

	var args []interface{}

	if q != nil {
		var where string
		var err error
		where, args, err = builder.ToSQL(q)
		if err != nil {
			return nil, err
		}
		query += ` WHERE ` + where
	}

	if sort != "" {
		query += ` ` + getOrderStmt(sort)
	}

	rows, err := s.db.Sync(ctx).QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var items []GameResult

	for rows.Next() {
		var item GameResult
		if err := rows.Scan(
			&item.ID,
			&item.FkGameID,
			&item.Place,
			&item.Points,
		); err != nil {
			return nil, err
		}

		items = append(items, item)
	}

	return items, nil
}

// FindWithLimit perform find request by params, offset and limit
func (s *GameResultStorage) FindWithLimit(ctx context.Context, q builder.Cond, sort string, offset, limit uint64) ([]GameResult, error) {
	query := `SELECT id, fk_game_id, place, points FROM game_result`

	var args []interface{}

	if q != nil {
		var where string
		var err error
		where, args, err = builder.ToSQL(q)
		if err != nil {
			return nil, err
		}
		query += ` WHERE ` + where
	}

	if sort != "" {
		query += ` ` + getOrderStmt(sort)
	}

	if limit != 0 {
		query += ` LIMIT ? OFFSET ?`
		args = append(args, limit)
		args = append(args, offset)
	}

	rows, err := s.db.Sync(ctx).QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var items []GameResult

	for rows.Next() {
		var item GameResult
		if err := rows.Scan(
			&item.ID,
			&item.FkGameID,
			&item.Place,
			&item.Points,
		); err != nil {
			return nil, err
		}

		items = append(items, item)
	}

	return items, nil
}

// Total return count(*) by params
func (s *GameResultStorage) Total(ctx context.Context, q builder.Cond) (uint64, error) {
	query := `SELECT count(*) FROM game_result`

	var args []interface{}

	if q != nil {
		var where string
		var err error
		where, args, err = builder.ToSQL(q)
		if err != nil {
			return 0, err
		}
		query += ` WHERE ` + where
	}

	rows, err := s.db.Sync(ctx).QueryContext(ctx, query, args...)
	if err != nil {
		return 0, err
	}
	defer rows.Close()

	var count uint64

	for rows.Next() {
		if err := rows.Scan(
			&count,
		); err != nil {
			return 0, err
		}
	}

	return count, nil
}

// Insert inserts the GameResult to the database.
func (s *GameResultStorage) Insert(ctx context.Context, item GameResult) (int, error) {
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO game_result (` +
		`fk_game_id, place, points` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`
	// run
	logger.Debugf(ctx, sqlstr, item.FkGameID, item.Place, item.Points)

	res, err := s.db.Master(ctx).ExecContext(ctx, sqlstr, item.FkGameID, item.Place, item.Points)
	if err != nil {
		return 0, err
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return 0, err
	}

	return int(id), nil
}

// Update updates a GameResult in the database.
func (s *GameResultStorage) Update(ctx context.Context, item GameResult) error {
	// update with primary key
	const sqlstr = `UPDATE game_result SET ` +
		`fk_game_id = ?, place = ?, points = ? ` +
		`WHERE id = ?`
	// run
	logger.Debugf(ctx, sqlstr, item.FkGameID, item.Place, item.Points, item.ID)
	if _, err := s.db.Master(ctx).ExecContext(ctx, sqlstr, item.FkGameID, item.Place, item.Points, item.ID); err != nil {
		return err
	}

	return nil
}

// Upsert performs an upsert for GameResult.
func (s *GameResultStorage) Upsert(ctx context.Context, item GameResult) error {
	// upsert
	const sqlstr = `INSERT INTO game_result (` +
		`id, fk_game_id, place, points` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`fk_game_id = VALUES(fk_game_id), place = VALUES(place), points = VALUES(points)`
	// run
	logger.Debugf(ctx, sqlstr, item.ID, item.FkGameID, item.Place, item.Points)
	if _, err := s.db.Master(ctx).ExecContext(ctx, sqlstr, item.ID, item.FkGameID, item.Place, item.Points); err != nil {
		return err
	}

	return nil
}

// Delete deletes the GameResult from the database.
func (s *GameResultStorage) Delete(ctx context.Context, id int) error {
	// delete with single primary key
	const sqlstr = `DELETE FROM game_result ` +
		`WHERE id = ?`
	// run
	logger.Debugf(ctx, sqlstr, id)

	if _, err := s.db.Master(ctx).ExecContext(ctx, sqlstr, id); err != nil {
		return err
	}

	return nil
}

// GetGameResultByFkGameID retrieves a row from 'game_result' as a GameResult.
//
// Generated from index 'game_result_ibfk_1'.
func (s *GameResultStorage) GetGameResultByFkGameID(ctx context.Context, fkGameID int) (*GameResult, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, fk_game_id, place, points ` +
		`FROM game_result ` +
		`WHERE fk_game_id = ?`
	// run
	logger.Debugf(ctx, sqlstr, fkGameID)
	gr := GameResult{}
	if err := s.db.Sync(ctx).QueryRowContext(ctx, sqlstr, fkGameID).Scan(&gr.ID, &gr.FkGameID, &gr.Place, &gr.Points); err != nil {
		return nil, err
	}
	return &gr, nil
}

// GetGameResultByID retrieves a row from 'game_result' as a GameResult.
//
// Generated from index 'game_result_id_pkey'.
func (s *GameResultStorage) GetGameResultByID(ctx context.Context, id int) (*GameResult, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, fk_game_id, place, points ` +
		`FROM game_result ` +
		`WHERE id = ?`
	// run
	logger.Debugf(ctx, sqlstr, id)
	gr := GameResult{}
	if err := s.db.Sync(ctx).QueryRowContext(ctx, sqlstr, id).Scan(&gr.ID, &gr.FkGameID, &gr.Place, &gr.Points); err != nil {
		return nil, err
	}
	return &gr, nil
}
