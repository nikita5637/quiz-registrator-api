package mysql

// Code generated by xo. DO NOT EDIT.

import (
	"context"

	"github.com/go-xorm/builder"
	"github.com/nikita5637/quiz-registrator-api/internal/pkg/logger"

	"github.com/nikita5637/quiz-registrator-api/internal/pkg/tx"
)

// IcsFile represents a row from 'ics_file'.
type IcsFile struct {
	ID       int    `json:"id"`         // id
	FkGameID int    `json:"fk_game_id"` // fk_game_id
	Name     string `json:"name"`       // name
}

// IcsFileStorage is IcsFile service implementation
type IcsFileStorage struct {
	db *tx.Manager
}

// NewIcsFileStorage creates new instance of IcsFileStorage
func NewIcsFileStorage(txManager *tx.Manager) *IcsFileStorage {
	return &IcsFileStorage{
		db: txManager,
	}
}

// GetAll returns all records
func (s *IcsFileStorage) GetAll(ctx context.Context) ([]IcsFile, error) {
	return s.Find(ctx, nil, "")
}

// Find perform find request by params
func (s *IcsFileStorage) Find(ctx context.Context, q builder.Cond, sort string) ([]IcsFile, error) {
	query := `SELECT id, fk_game_id, name FROM ics_file`

	var args []interface{}

	if q != nil {
		var where string
		var err error
		where, args, err = builder.ToSQL(q)
		if err != nil {
			return nil, err
		}
		query += ` WHERE ` + where
	}

	if sort != "" {
		query += ` ` + getOrderStmt(sort)
	}

	rows, err := s.db.Sync(ctx).QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var items []IcsFile

	for rows.Next() {
		var item IcsFile
		if err := rows.Scan(
			&item.ID,
			&item.FkGameID,
			&item.Name,
		); err != nil {
			return nil, err
		}

		items = append(items, item)
	}

	return items, nil
}

// FindWithLimit perform find request by params, offset and limit
func (s *IcsFileStorage) FindWithLimit(ctx context.Context, q builder.Cond, sort string, offset, limit uint64) ([]IcsFile, error) {
	query := `SELECT id, fk_game_id, name FROM ics_file`

	var args []interface{}

	if q != nil {
		var where string
		var err error
		where, args, err = builder.ToSQL(q)
		if err != nil {
			return nil, err
		}
		query += ` WHERE ` + where
	}

	if sort != "" {
		query += ` ` + getOrderStmt(sort)
	}

	if limit != 0 {
		query += ` OFFSET ? LIMIT ?`
		args = append(args, offset)
		args = append(args, limit)
	}

	rows, err := s.db.Sync(ctx).QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var items []IcsFile

	for rows.Next() {
		var item IcsFile
		if err := rows.Scan(
			&item.ID,
			&item.FkGameID,
			&item.Name,
		); err != nil {
			return nil, err
		}

		items = append(items, item)
	}

	return items, nil
}

// Total return count(*) by params
func (s *IcsFileStorage) Total(ctx context.Context, q builder.Cond) (uint64, error) {
	query := `SELECT count(*) FROM ics_file`

	var args []interface{}

	if q != nil {
		var where string
		var err error
		where, args, err = builder.ToSQL(q)
		if err != nil {
			return 0, err
		}
		query += ` WHERE ` + where
	}

	rows, err := s.db.Sync(ctx).QueryContext(ctx, query, args...)
	if err != nil {
		return 0, err
	}
	defer rows.Close()

	var count uint64

	for rows.Next() {
		if err := rows.Scan(
			&count,
		); err != nil {
			return 0, err
		}
	}

	return count, nil
}

// Insert inserts the IcsFile to the database.
func (s *IcsFileStorage) Insert(ctx context.Context, item IcsFile) (int, error) {
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO ics_file (` +
		`fk_game_id, name` +
		`) VALUES (` +
		`?, ?` +
		`)`
	// run
	logger.Debugf(ctx, sqlstr, item.FkGameID, item.Name)

	res, err := s.db.Master(ctx).ExecContext(ctx, sqlstr, item.FkGameID, item.Name)
	if err != nil {
		return 0, err
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return 0, err
	}

	return int(id), nil
}

// Update updates a IcsFile in the database.
func (s *IcsFileStorage) Update(ctx context.Context, item IcsFile) error {
	// update with primary key
	const sqlstr = `UPDATE ics_file SET ` +
		`fk_game_id = ?, name = ? ` +
		`WHERE id = ?`
	// run
	logger.Debugf(ctx, sqlstr, item.FkGameID, item.Name, item.ID)
	if _, err := s.db.Master(ctx).ExecContext(ctx, sqlstr, item.FkGameID, item.Name, item.ID); err != nil {
		return err
	}

	return nil
}

// Upsert performs an upsert for IcsFile.
func (s *IcsFileStorage) Upsert(ctx context.Context, item IcsFile) error {
	// upsert
	const sqlstr = `INSERT INTO ics_file (` +
		`id, fk_game_id, name` +
		`) VALUES (` +
		`?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`fk_game_id = VALUES(fk_game_id), name = VALUES(name)`
	// run
	logger.Debugf(ctx, sqlstr, item.ID, item.FkGameID, item.Name)
	if _, err := s.db.Master(ctx).ExecContext(ctx, sqlstr, item.ID, item.FkGameID, item.Name); err != nil {
		return err
	}

	return nil
}

// Delete deletes the IcsFile from the database.
func (s *IcsFileStorage) Delete(ctx context.Context, id int) error {
	// delete with single primary key
	const sqlstr = `DELETE FROM ics_file ` +
		`WHERE id = ?`
	// run
	logger.Debugf(ctx, sqlstr, id)

	if _, err := s.db.Master(ctx).ExecContext(ctx, sqlstr, id); err != nil {
		return err
	}

	return nil
}

// GetIcsFileByFkGameID retrieves a row from 'ics_file' as a IcsFile.
//
// Generated from index 'fk_game_id'.
func (s *IcsFileStorage) GetIcsFileByFkGameID(ctx context.Context, fkGameID int) (*IcsFile, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, fk_game_id, name ` +
		`FROM ics_file ` +
		`WHERE fk_game_id = ?`
	// run
	logger.Debugf(ctx, sqlstr, fkGameID)
	ifVal := IcsFile{}
	if err := s.db.Sync(ctx).QueryRowContext(ctx, sqlstr, fkGameID).Scan(&ifVal.ID, &ifVal.FkGameID, &ifVal.Name); err != nil {
		return nil, err
	}
	return &ifVal, nil
}

// GetIcsFileByID retrieves a row from 'ics_file' as a IcsFile.
//
// Generated from index 'ics_file_id_pkey'.
func (s *IcsFileStorage) GetIcsFileByID(ctx context.Context, id int) (*IcsFile, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, fk_game_id, name ` +
		`FROM ics_file ` +
		`WHERE id = ?`
	// run
	logger.Debugf(ctx, sqlstr, id)
	ifVal := IcsFile{}
	if err := s.db.Sync(ctx).QueryRowContext(ctx, sqlstr, id).Scan(&ifVal.ID, &ifVal.FkGameID, &ifVal.Name); err != nil {
		return nil, err
	}
	return &ifVal, nil
}

// GetIcsFileByName retrieves a row from 'ics_file' as a IcsFile.
//
// Generated from index 'name'.
func (s *IcsFileStorage) GetIcsFileByName(ctx context.Context, name string) (*IcsFile, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, fk_game_id, name ` +
		`FROM ics_file ` +
		`WHERE name = ?`
	// run
	logger.Debugf(ctx, sqlstr, name)
	ifVal := IcsFile{}
	if err := s.db.Sync(ctx).QueryRowContext(ctx, sqlstr, name).Scan(&ifVal.ID, &ifVal.FkGameID, &ifVal.Name); err != nil {
		return nil, err
	}
	return &ifVal, nil
}
