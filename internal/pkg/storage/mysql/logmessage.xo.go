package mysql

// Code generated by xo. DO NOT EDIT.

import (
	"context"

	"github.com/go-xorm/builder"
	"github.com/nikita5637/quiz-registrator-api/internal/pkg/logger"

	"github.com/nikita5637/quiz-registrator-api/internal/pkg/tx"
)

// LogMessage represents a row from 'log_messages'.
type LogMessage struct {
	ID      int    `json:"id"`      // id
	Message string `json:"message"` // message
}

// LogMessageStorage is LogMessage service implementation
type LogMessageStorage struct {
	db *tx.Manager
}

// NewLogMessageStorage creates new instance of LogMessageStorage
func NewLogMessageStorage(txManager *tx.Manager) *LogMessageStorage {
	return &LogMessageStorage{
		db: txManager,
	}
}

// GetAll returns all records
func (s *LogMessageStorage) GetAll(ctx context.Context) ([]LogMessage, error) {
	return s.Find(ctx, nil, "")
}

// Find perform find request by params
func (s *LogMessageStorage) Find(ctx context.Context, q builder.Cond, sort string) ([]LogMessage, error) {
	query := `SELECT id, message FROM log_messages`

	var args []interface{}

	if q != nil {
		var where string
		var err error
		where, args, err = builder.ToSQL(q)
		if err != nil {
			return nil, err
		}
		query += ` WHERE ` + where
	}

	if sort != "" {
		query += ` ` + getOrderStmt(sort)
	}

	rows, err := s.db.Sync(ctx).QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var items []LogMessage

	for rows.Next() {
		var item LogMessage
		if err := rows.Scan(
			&item.ID,
			&item.Message,
		); err != nil {
			return nil, err
		}

		items = append(items, item)
	}

	return items, nil
}

// FindWithLimit perform find request by params, offset and limit
func (s *LogMessageStorage) FindWithLimit(ctx context.Context, q builder.Cond, sort string, offset, limit uint64) ([]LogMessage, error) {
	query := `SELECT id, message FROM log_messages`

	var args []interface{}

	if q != nil {
		var where string
		var err error
		where, args, err = builder.ToSQL(q)
		if err != nil {
			return nil, err
		}
		query += ` WHERE ` + where
	}

	if sort != "" {
		query += ` ` + getOrderStmt(sort)
	}

	if limit != 0 {
		query += ` LIMIT ? OFFSET ?`
		args = append(args, limit)
		args = append(args, offset)
	}

	rows, err := s.db.Sync(ctx).QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var items []LogMessage

	for rows.Next() {
		var item LogMessage
		if err := rows.Scan(
			&item.ID,
			&item.Message,
		); err != nil {
			return nil, err
		}

		items = append(items, item)
	}

	return items, nil
}

// Total return count(*) by params
func (s *LogMessageStorage) Total(ctx context.Context, q builder.Cond) (uint64, error) {
	query := `SELECT count(*) FROM log_messages`

	var args []interface{}

	if q != nil {
		var where string
		var err error
		where, args, err = builder.ToSQL(q)
		if err != nil {
			return 0, err
		}
		query += ` WHERE ` + where
	}

	rows, err := s.db.Sync(ctx).QueryContext(ctx, query, args...)
	if err != nil {
		return 0, err
	}
	defer rows.Close()

	var count uint64

	for rows.Next() {
		if err := rows.Scan(
			&count,
		); err != nil {
			return 0, err
		}
	}

	return count, nil
}

// Insert inserts the LogMessage to the database.
func (s *LogMessageStorage) Insert(ctx context.Context, item LogMessage) (int, error) {
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO log_messages (` +
		`id, message` +
		`) VALUES (` +
		`?, ?` +
		`)`
	// run
	logger.Debugf(ctx, sqlstr, item.Message)

	res, err := s.db.Master(ctx).ExecContext(ctx, sqlstr, item.ID, item.Message)
	if err != nil {
		return 0, err
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return 0, err
	}

	return int(id), nil
}

// Update updates a LogMessage in the database.
func (s *LogMessageStorage) Update(ctx context.Context, item LogMessage) error {
	// update with primary key
	const sqlstr = `UPDATE log_messages SET ` +
		`message = ? ` +
		`WHERE id = ?`
	// run
	logger.Debugf(ctx, sqlstr, item.Message, item.ID)
	if _, err := s.db.Master(ctx).ExecContext(ctx, sqlstr, item.Message, item.ID); err != nil {
		return err
	}

	return nil
}

// Upsert performs an upsert for LogMessage.
func (s *LogMessageStorage) Upsert(ctx context.Context, item LogMessage) error {
	// upsert
	const sqlstr = `INSERT INTO log_messages (` +
		`id, message` +
		`) VALUES (` +
		`?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`id = VALUES(id), message = VALUES(message)`
	// run
	logger.Debugf(ctx, sqlstr, item.ID, item.Message)
	if _, err := s.db.Master(ctx).ExecContext(ctx, sqlstr, item.ID, item.Message); err != nil {
		return err
	}

	return nil
}

// Delete deletes the LogMessage from the database.
func (s *LogMessageStorage) Delete(ctx context.Context, id int) error {
	// delete with single primary key
	const sqlstr = `DELETE FROM log_messages ` +
		`WHERE id = ?`
	// run
	logger.Debugf(ctx, sqlstr, id)

	if _, err := s.db.Master(ctx).ExecContext(ctx, sqlstr, id); err != nil {
		return err
	}

	return nil
}

// GetLogMessageByID retrieves a row from 'log_messages' as a LogMessage.
//
// Generated from index 'log_messages_id_pkey'.
func (s *LogMessageStorage) GetLogMessageByID(ctx context.Context, id int) (*LogMessage, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, message ` +
		`FROM log_messages ` +
		`WHERE id = ?`
	// run
	logger.Debugf(ctx, sqlstr, id)
	lm := LogMessage{}
	if err := s.db.Sync(ctx).QueryRowContext(ctx, sqlstr, id).Scan(&lm.ID, &lm.Message); err != nil {
		return nil, err
	}
	return &lm, nil
}
