package mysql

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"

	"github.com/go-xorm/builder"
	"github.com/nikita5637/quiz-registrator-api/internal/pkg/logger"

	"github.com/nikita5637/quiz-registrator-api/internal/pkg/tx"
)

// GamePlayer represents a row from 'game_player'.
type GamePlayer struct {
	ID           int           `json:"id"`            // id
	FkGameID     int           `json:"fk_game_id"`    // fk_game_id
	FkUserID     sql.NullInt64 `json:"fk_user_id"`    // fk_user_id
	RegisteredBy int           `json:"registered_by"` // registered_by
	Degree       uint8         `json:"degree"`        // degree
	CreatedAt    sql.NullTime  `json:"created_at"`    // created_at
	UpdatedAt    sql.NullTime  `json:"updated_at"`    // updated_at
	DeletedAt    sql.NullTime  `json:"deleted_at"`    // deleted_at
}

// GamePlayerStorage is GamePlayer service implementation
type GamePlayerStorage struct {
	db *tx.Manager
}

// NewGamePlayerStorage creates new instance of GamePlayerStorage
func NewGamePlayerStorage(txManager *tx.Manager) *GamePlayerStorage {
	return &GamePlayerStorage{
		db: txManager,
	}
}

// GetAll returns all records
func (s *GamePlayerStorage) GetAll(ctx context.Context) ([]GamePlayer, error) {
	return s.Find(ctx, nil, "")
}

// Find perform find request by params
func (s *GamePlayerStorage) Find(ctx context.Context, q builder.Cond, sort string) ([]GamePlayer, error) {
	query := `SELECT id, fk_game_id, fk_user_id, registered_by, degree, created_at, updated_at, deleted_at FROM game_player`

	var args []interface{}

	if q != nil {
		var where string
		var err error
		where, args, err = builder.ToSQL(q)
		if err != nil {
			return nil, err
		}
		query += ` WHERE ` + where
	}

	if sort != "" {
		query += ` ` + getOrderStmt(sort)
	}

	rows, err := s.db.Sync(ctx).QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var items []GamePlayer

	for rows.Next() {
		var item GamePlayer
		if err := rows.Scan(
			&item.ID,
			&item.FkGameID,
			&item.FkUserID,
			&item.RegisteredBy,
			&item.Degree,
			&item.CreatedAt,
			&item.UpdatedAt,
			&item.DeletedAt,
		); err != nil {
			return nil, err
		}

		items = append(items, item)
	}

	return items, nil
}

// FindWithLimit perform find request by params, offset and limit
func (s *GamePlayerStorage) FindWithLimit(ctx context.Context, q builder.Cond, sort string, offset, limit uint64) ([]GamePlayer, error) {
	query := `SELECT id, fk_game_id, fk_user_id, registered_by, degree, created_at, updated_at, deleted_at FROM game_player`

	var args []interface{}

	if q != nil {
		var where string
		var err error
		where, args, err = builder.ToSQL(q)
		if err != nil {
			return nil, err
		}
		query += ` WHERE ` + where
	}

	if sort != "" {
		query += ` ` + getOrderStmt(sort)
	}

	if limit != 0 {
		query += ` OFFSET ? LIMIT ?`
		args = append(args, offset)
		args = append(args, limit)
	}

	rows, err := s.db.Sync(ctx).QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var items []GamePlayer

	for rows.Next() {
		var item GamePlayer
		if err := rows.Scan(
			&item.ID,
			&item.FkGameID,
			&item.FkUserID,
			&item.RegisteredBy,
			&item.Degree,
			&item.CreatedAt,
			&item.UpdatedAt,
			&item.DeletedAt,
		); err != nil {
			return nil, err
		}

		items = append(items, item)
	}

	return items, nil
}

// Total return count(*) by params
func (s *GamePlayerStorage) Total(ctx context.Context, q builder.Cond) (uint64, error) {
	query := `SELECT count(*) FROM game_player`

	var args []interface{}

	if q != nil {
		var where string
		var err error
		where, args, err = builder.ToSQL(q)
		if err != nil {
			return 0, err
		}
		query += ` WHERE ` + where
	}

	rows, err := s.db.Sync(ctx).QueryContext(ctx, query, args...)
	if err != nil {
		return 0, err
	}
	defer rows.Close()

	var count uint64

	for rows.Next() {
		if err := rows.Scan(
			&count,
		); err != nil {
			return 0, err
		}
	}

	return count, nil
}

// Insert inserts the GamePlayer to the database.
func (s *GamePlayerStorage) Insert(ctx context.Context, item GamePlayer) (int, error) {
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO game_player (` +
		`fk_game_id, fk_user_id, registered_by, degree, created_at` +
		`) VALUES (` +
		`?, ?, ?, ?, UTC_TIMESTAMP()` +
		`)`
	// run
	logger.Debugf(ctx, sqlstr, item.FkGameID, item.FkUserID, item.RegisteredBy, item.Degree)

	res, err := s.db.Master(ctx).ExecContext(ctx, sqlstr, item.FkGameID, item.FkUserID, item.RegisteredBy, item.Degree)
	if err != nil {
		return 0, err
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return 0, err
	}

	return int(id), nil
}

// Update updates a GamePlayer in the database.
func (s *GamePlayerStorage) Update(ctx context.Context, item GamePlayer) error {
	// update with primary key
	const sqlstr = `UPDATE game_player SET ` +
		`fk_game_id = ?, fk_user_id = ?, registered_by = ?, degree = ?, updated_at = UTC_TIMESTAMP() ` +
		`WHERE id = ?`
	// run
	logger.Debugf(ctx, sqlstr, item.FkGameID, item.FkUserID, item.RegisteredBy, item.Degree, item.ID)
	if _, err := s.db.Master(ctx).ExecContext(ctx, sqlstr, item.FkGameID, item.FkUserID, item.RegisteredBy, item.Degree, item.ID); err != nil {
		return err
	}

	return nil
}

// Upsert performs an upsert for GamePlayer.
func (s *GamePlayerStorage) Upsert(ctx context.Context, item GamePlayer) error {
	// upsert
	const sqlstr = `INSERT INTO game_player (` +
		`id, fk_game_id, fk_user_id, registered_by, degree, created_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, UTC_TIMESTAMP()` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`fk_game_id = VALUES(fk_game_id), fk_user_id = VALUES(fk_user_id), registered_by = VALUES(registered_by), degree = VALUES(degree), created_at = VALUES(created_at), updated_at = VALUES(updated_at), deleted_at = VALUES(deleted_at)`
	// run
	logger.Debugf(ctx, sqlstr, item.ID, item.FkGameID, item.FkUserID, item.RegisteredBy, item.Degree, item.CreatedAt, item.UpdatedAt, item.DeletedAt)
	if _, err := s.db.Master(ctx).ExecContext(ctx, sqlstr, item.ID, item.FkGameID, item.FkUserID, item.RegisteredBy, item.Degree); err != nil {
		return err
	}

	return nil
}

// Delete deletes the GamePlayer from the database.
func (s *GamePlayerStorage) Delete(ctx context.Context, id int) error {
	// update with primary key
	const sqlstr = `UPDATE game_player SET updated_at = UTC_TIMESTAMP(), deleted_at = UTC_TIMESTAMP() WHERE id = ?`
	// run
	logger.Debugf(ctx, sqlstr, id)

	if _, err := s.db.Master(ctx).ExecContext(ctx, sqlstr, id); err != nil {
		return err
	}

	return nil
}

// GetGamePlayerByFkGameID retrieves a row from 'game_player' as a GamePlayer.
//
// Generated from index 'fk_game_id'.
func (s *GamePlayerStorage) GetGamePlayerByFkGameID(ctx context.Context, fkGameID int) ([]*GamePlayer, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, fk_game_id, fk_user_id, registered_by, degree, created_at, updated_at, deleted_at ` +
		`FROM game_player ` +
		`WHERE fk_game_id = ?`
	// run
	logger.Debugf(ctx, sqlstr, fkGameID)
	rows, err := s.db.Sync(ctx).QueryContext(ctx, sqlstr, fkGameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	// process
	var res []*GamePlayer
	for rows.Next() {
		gp := GamePlayer{}
		// scan
		if err := rows.Scan(&gp.ID, &gp.FkGameID, &gp.FkUserID, &gp.RegisteredBy, &gp.Degree, &gp.CreatedAt, &gp.UpdatedAt, &gp.DeletedAt); err != nil {
			return nil, err
		}
		res = append(res, &gp)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}

	return res, nil
}

// GetGamePlayerByFkUserID retrieves a row from 'game_player' as a GamePlayer.
//
// Generated from index 'fk_user_id'.
func (s *GamePlayerStorage) GetGamePlayerByFkUserID(ctx context.Context, fkUserID sql.NullInt64) ([]*GamePlayer, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, fk_game_id, fk_user_id, registered_by, degree, created_at, updated_at, deleted_at ` +
		`FROM game_player ` +
		`WHERE fk_user_id = ?`
	// run
	logger.Debugf(ctx, sqlstr, fkUserID)
	rows, err := s.db.Sync(ctx).QueryContext(ctx, sqlstr, fkUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	// process
	var res []*GamePlayer
	for rows.Next() {
		gp := GamePlayer{}
		// scan
		if err := rows.Scan(&gp.ID, &gp.FkGameID, &gp.FkUserID, &gp.RegisteredBy, &gp.Degree, &gp.CreatedAt, &gp.UpdatedAt, &gp.DeletedAt); err != nil {
			return nil, err
		}
		res = append(res, &gp)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}

	return res, nil
}

// GetGamePlayerByID retrieves a row from 'game_player' as a GamePlayer.
//
// Generated from index 'game_player_id_pkey'.
func (s *GamePlayerStorage) GetGamePlayerByID(ctx context.Context, id int) (*GamePlayer, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, fk_game_id, fk_user_id, registered_by, degree, created_at, updated_at, deleted_at ` +
		`FROM game_player ` +
		`WHERE id = ?`
	// run
	logger.Debugf(ctx, sqlstr, id)
	gp := GamePlayer{}
	if err := s.db.Sync(ctx).QueryRowContext(ctx, sqlstr, id).Scan(&gp.ID, &gp.FkGameID, &gp.FkUserID, &gp.RegisteredBy, &gp.Degree, &gp.CreatedAt, &gp.UpdatedAt, &gp.DeletedAt); err != nil {
		return nil, err
	}
	return &gp, nil
}
