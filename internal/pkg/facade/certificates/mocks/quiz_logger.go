// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	quizlogger "github.com/nikita5637/quiz-registrator-api/internal/pkg/quiz_logger"
	mock "github.com/stretchr/testify/mock"
)

// QuizLogger is an autogenerated mock type for the QuizLogger type
type QuizLogger struct {
	mock.Mock
}

type QuizLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *QuizLogger) EXPECT() *QuizLogger_Expecter {
	return &QuizLogger_Expecter{mock: &_m.Mock}
}

// Write provides a mock function with given fields: ctx, params
func (_m *QuizLogger) Write(ctx context.Context, params quizlogger.Params) error {
	ret := _m.Called(ctx, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, quizlogger.Params) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QuizLogger_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type QuizLogger_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - ctx context.Context
//   - params quizlogger.Params
func (_e *QuizLogger_Expecter) Write(ctx interface{}, params interface{}) *QuizLogger_Write_Call {
	return &QuizLogger_Write_Call{Call: _e.mock.On("Write", ctx, params)}
}

func (_c *QuizLogger_Write_Call) Run(run func(ctx context.Context, params quizlogger.Params)) *QuizLogger_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(quizlogger.Params))
	})
	return _c
}

func (_c *QuizLogger_Write_Call) Return(_a0 error) *QuizLogger_Write_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QuizLogger_Write_Call) RunAndReturn(run func(context.Context, quizlogger.Params) error) *QuizLogger_Write_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewQuizLogger interface {
	mock.TestingT
	Cleanup(func())
}

// NewQuizLogger creates a new instance of QuizLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQuizLogger(t mockConstructorTestingTNewQuizLogger) *QuizLogger {
	mock := &QuizLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
