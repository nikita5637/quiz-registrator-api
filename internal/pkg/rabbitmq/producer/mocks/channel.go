// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	amqp091 "github.com/rabbitmq/amqp091-go"

	mock "github.com/stretchr/testify/mock"
)

// Channel is an autogenerated mock type for the Channel type
type Channel struct {
	mock.Mock
}

type Channel_Expecter struct {
	mock *mock.Mock
}

func (_m *Channel) EXPECT() *Channel_Expecter {
	return &Channel_Expecter{mock: &_m.Mock}
}

// PublishWithContext provides a mock function with given fields: ctx, exchange, key, mandatory, immediate, msg
func (_m *Channel) PublishWithContext(ctx context.Context, exchange string, key string, mandatory bool, immediate bool, msg amqp091.Publishing) error {
	ret := _m.Called(ctx, exchange, key, mandatory, immediate, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool, bool, amqp091.Publishing) error); ok {
		r0 = rf(ctx, exchange, key, mandatory, immediate, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Channel_PublishWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishWithContext'
type Channel_PublishWithContext_Call struct {
	*mock.Call
}

// PublishWithContext is a helper method to define mock.On call
//   - ctx context.Context
//   - exchange string
//   - key string
//   - mandatory bool
//   - immediate bool
//   - msg amqp091.Publishing
func (_e *Channel_Expecter) PublishWithContext(ctx interface{}, exchange interface{}, key interface{}, mandatory interface{}, immediate interface{}, msg interface{}) *Channel_PublishWithContext_Call {
	return &Channel_PublishWithContext_Call{Call: _e.mock.On("PublishWithContext", ctx, exchange, key, mandatory, immediate, msg)}
}

func (_c *Channel_PublishWithContext_Call) Run(run func(ctx context.Context, exchange string, key string, mandatory bool, immediate bool, msg amqp091.Publishing)) *Channel_PublishWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(bool), args[4].(bool), args[5].(amqp091.Publishing))
	})
	return _c
}

func (_c *Channel_PublishWithContext_Call) Return(_a0 error) *Channel_PublishWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Channel_PublishWithContext_Call) RunAndReturn(run func(context.Context, string, string, bool, bool, amqp091.Publishing) error) *Channel_PublishWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// QueueDeclare provides a mock function with given fields: name, durable, autoDelete, exclusive, noWait, args
func (_m *Channel) QueueDeclare(name string, durable bool, autoDelete bool, exclusive bool, noWait bool, args amqp091.Table) (amqp091.Queue, error) {
	ret := _m.Called(name, durable, autoDelete, exclusive, noWait, args)

	var r0 amqp091.Queue
	var r1 error
	if rf, ok := ret.Get(0).(func(string, bool, bool, bool, bool, amqp091.Table) (amqp091.Queue, error)); ok {
		return rf(name, durable, autoDelete, exclusive, noWait, args)
	}
	if rf, ok := ret.Get(0).(func(string, bool, bool, bool, bool, amqp091.Table) amqp091.Queue); ok {
		r0 = rf(name, durable, autoDelete, exclusive, noWait, args)
	} else {
		r0 = ret.Get(0).(amqp091.Queue)
	}

	if rf, ok := ret.Get(1).(func(string, bool, bool, bool, bool, amqp091.Table) error); ok {
		r1 = rf(name, durable, autoDelete, exclusive, noWait, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Channel_QueueDeclare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueueDeclare'
type Channel_QueueDeclare_Call struct {
	*mock.Call
}

// QueueDeclare is a helper method to define mock.On call
//   - name string
//   - durable bool
//   - autoDelete bool
//   - exclusive bool
//   - noWait bool
//   - args amqp091.Table
func (_e *Channel_Expecter) QueueDeclare(name interface{}, durable interface{}, autoDelete interface{}, exclusive interface{}, noWait interface{}, args interface{}) *Channel_QueueDeclare_Call {
	return &Channel_QueueDeclare_Call{Call: _e.mock.On("QueueDeclare", name, durable, autoDelete, exclusive, noWait, args)}
}

func (_c *Channel_QueueDeclare_Call) Run(run func(name string, durable bool, autoDelete bool, exclusive bool, noWait bool, args amqp091.Table)) *Channel_QueueDeclare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool), args[2].(bool), args[3].(bool), args[4].(bool), args[5].(amqp091.Table))
	})
	return _c
}

func (_c *Channel_QueueDeclare_Call) Return(_a0 amqp091.Queue, _a1 error) *Channel_QueueDeclare_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Channel_QueueDeclare_Call) RunAndReturn(run func(string, bool, bool, bool, bool, amqp091.Table) (amqp091.Queue, error)) *Channel_QueueDeclare_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewChannel interface {
	mock.TestingT
	Cleanup(func())
}

// NewChannel creates a new instance of Channel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChannel(t mockConstructorTestingTNewChannel) *Channel {
	mock := &Channel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
