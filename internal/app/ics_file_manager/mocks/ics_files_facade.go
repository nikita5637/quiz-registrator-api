// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/nikita5637/quiz-registrator-api/internal/pkg/model"
)

// ICSFilesFacade is an autogenerated mock type for the ICSFilesFacade type
type ICSFilesFacade struct {
	mock.Mock
}

type ICSFilesFacade_Expecter struct {
	mock *mock.Mock
}

func (_m *ICSFilesFacade) EXPECT() *ICSFilesFacade_Expecter {
	return &ICSFilesFacade_Expecter{mock: &_m.Mock}
}

// CreateICSFile provides a mock function with given fields: ctx, ics
func (_m *ICSFilesFacade) CreateICSFile(ctx context.Context, ics model.ICSFile) (model.ICSFile, error) {
	ret := _m.Called(ctx, ics)

	var r0 model.ICSFile
	if rf, ok := ret.Get(0).(func(context.Context, model.ICSFile) model.ICSFile); ok {
		r0 = rf(ctx, ics)
	} else {
		r0 = ret.Get(0).(model.ICSFile)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.ICSFile) error); ok {
		r1 = rf(ctx, ics)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ICSFilesFacade_CreateICSFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateICSFile'
type ICSFilesFacade_CreateICSFile_Call struct {
	*mock.Call
}

// CreateICSFile is a helper method to define mock.On call
//  - ctx context.Context
//  - ics model.ICSFile
func (_e *ICSFilesFacade_Expecter) CreateICSFile(ctx interface{}, ics interface{}) *ICSFilesFacade_CreateICSFile_Call {
	return &ICSFilesFacade_CreateICSFile_Call{Call: _e.mock.On("CreateICSFile", ctx, ics)}
}

func (_c *ICSFilesFacade_CreateICSFile_Call) Run(run func(ctx context.Context, ics model.ICSFile)) *ICSFilesFacade_CreateICSFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.ICSFile))
	})
	return _c
}

func (_c *ICSFilesFacade_CreateICSFile_Call) Return(_a0 model.ICSFile, _a1 error) *ICSFilesFacade_CreateICSFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteICSFile provides a mock function with given fields: ctx, id
func (_m *ICSFilesFacade) DeleteICSFile(ctx context.Context, id int32) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ICSFilesFacade_DeleteICSFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteICSFile'
type ICSFilesFacade_DeleteICSFile_Call struct {
	*mock.Call
}

// DeleteICSFile is a helper method to define mock.On call
//  - ctx context.Context
//  - id int32
func (_e *ICSFilesFacade_Expecter) DeleteICSFile(ctx interface{}, id interface{}) *ICSFilesFacade_DeleteICSFile_Call {
	return &ICSFilesFacade_DeleteICSFile_Call{Call: _e.mock.On("DeleteICSFile", ctx, id)}
}

func (_c *ICSFilesFacade_DeleteICSFile_Call) Run(run func(ctx context.Context, id int32)) *ICSFilesFacade_DeleteICSFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *ICSFilesFacade_DeleteICSFile_Call) Return(_a0 error) *ICSFilesFacade_DeleteICSFile_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetICSFile provides a mock function with given fields: ctx, id
func (_m *ICSFilesFacade) GetICSFile(ctx context.Context, id int32) (model.ICSFile, error) {
	ret := _m.Called(ctx, id)

	var r0 model.ICSFile
	if rf, ok := ret.Get(0).(func(context.Context, int32) model.ICSFile); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.ICSFile)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ICSFilesFacade_GetICSFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetICSFile'
type ICSFilesFacade_GetICSFile_Call struct {
	*mock.Call
}

// GetICSFile is a helper method to define mock.On call
//  - ctx context.Context
//  - id int32
func (_e *ICSFilesFacade_Expecter) GetICSFile(ctx interface{}, id interface{}) *ICSFilesFacade_GetICSFile_Call {
	return &ICSFilesFacade_GetICSFile_Call{Call: _e.mock.On("GetICSFile", ctx, id)}
}

func (_c *ICSFilesFacade_GetICSFile_Call) Run(run func(ctx context.Context, id int32)) *ICSFilesFacade_GetICSFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *ICSFilesFacade_GetICSFile_Call) Return(_a0 model.ICSFile, _a1 error) *ICSFilesFacade_GetICSFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetICSFileByGameID provides a mock function with given fields: ctx, gameID
func (_m *ICSFilesFacade) GetICSFileByGameID(ctx context.Context, gameID int32) (model.ICSFile, error) {
	ret := _m.Called(ctx, gameID)

	var r0 model.ICSFile
	if rf, ok := ret.Get(0).(func(context.Context, int32) model.ICSFile); ok {
		r0 = rf(ctx, gameID)
	} else {
		r0 = ret.Get(0).(model.ICSFile)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, gameID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ICSFilesFacade_GetICSFileByGameID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetICSFileByGameID'
type ICSFilesFacade_GetICSFileByGameID_Call struct {
	*mock.Call
}

// GetICSFileByGameID is a helper method to define mock.On call
//  - ctx context.Context
//  - gameID int32
func (_e *ICSFilesFacade_Expecter) GetICSFileByGameID(ctx interface{}, gameID interface{}) *ICSFilesFacade_GetICSFileByGameID_Call {
	return &ICSFilesFacade_GetICSFileByGameID_Call{Call: _e.mock.On("GetICSFileByGameID", ctx, gameID)}
}

func (_c *ICSFilesFacade_GetICSFileByGameID_Call) Run(run func(ctx context.Context, gameID int32)) *ICSFilesFacade_GetICSFileByGameID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *ICSFilesFacade_GetICSFileByGameID_Call) Return(_a0 model.ICSFile, _a1 error) *ICSFilesFacade_GetICSFileByGameID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ListICSFiles provides a mock function with given fields: ctx
func (_m *ICSFilesFacade) ListICSFiles(ctx context.Context) ([]model.ICSFile, error) {
	ret := _m.Called(ctx)

	var r0 []model.ICSFile
	if rf, ok := ret.Get(0).(func(context.Context) []model.ICSFile); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ICSFile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ICSFilesFacade_ListICSFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListICSFiles'
type ICSFilesFacade_ListICSFiles_Call struct {
	*mock.Call
}

// ListICSFiles is a helper method to define mock.On call
//  - ctx context.Context
func (_e *ICSFilesFacade_Expecter) ListICSFiles(ctx interface{}) *ICSFilesFacade_ListICSFiles_Call {
	return &ICSFilesFacade_ListICSFiles_Call{Call: _e.mock.On("ListICSFiles", ctx)}
}

func (_c *ICSFilesFacade_ListICSFiles_Call) Run(run func(ctx context.Context)) *ICSFilesFacade_ListICSFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ICSFilesFacade_ListICSFiles_Call) Return(_a0 []model.ICSFile, _a1 error) *ICSFilesFacade_ListICSFiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewICSFilesFacade interface {
	mock.TestingT
	Cleanup(func())
}

// NewICSFilesFacade creates a new instance of ICSFilesFacade. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewICSFilesFacade(t mockConstructorTestingTNewICSFilesFacade) *ICSFilesFacade {
	mock := &ICSFilesFacade{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
