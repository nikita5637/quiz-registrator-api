// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/nikita5637/quiz-registrator-api/internal/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// CertificatesFacade is an autogenerated mock type for the CertificatesFacade type
type CertificatesFacade struct {
	mock.Mock
}

type CertificatesFacade_Expecter struct {
	mock *mock.Mock
}

func (_m *CertificatesFacade) EXPECT() *CertificatesFacade_Expecter {
	return &CertificatesFacade_Expecter{mock: &_m.Mock}
}

// CreateCertificate provides a mock function with given fields: ctx, certificate
func (_m *CertificatesFacade) CreateCertificate(ctx context.Context, certificate model.Certificate) (model.Certificate, error) {
	ret := _m.Called(ctx, certificate)

	var r0 model.Certificate
	if rf, ok := ret.Get(0).(func(context.Context, model.Certificate) model.Certificate); ok {
		r0 = rf(ctx, certificate)
	} else {
		r0 = ret.Get(0).(model.Certificate)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Certificate) error); ok {
		r1 = rf(ctx, certificate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CertificatesFacade_CreateCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCertificate'
type CertificatesFacade_CreateCertificate_Call struct {
	*mock.Call
}

// CreateCertificate is a helper method to define mock.On call
//  - ctx context.Context
//  - certificate model.Certificate
func (_e *CertificatesFacade_Expecter) CreateCertificate(ctx interface{}, certificate interface{}) *CertificatesFacade_CreateCertificate_Call {
	return &CertificatesFacade_CreateCertificate_Call{Call: _e.mock.On("CreateCertificate", ctx, certificate)}
}

func (_c *CertificatesFacade_CreateCertificate_Call) Run(run func(ctx context.Context, certificate model.Certificate)) *CertificatesFacade_CreateCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Certificate))
	})
	return _c
}

func (_c *CertificatesFacade_CreateCertificate_Call) Return(_a0 model.Certificate, _a1 error) *CertificatesFacade_CreateCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteCertificate provides a mock function with given fields: ctx, id
func (_m *CertificatesFacade) DeleteCertificate(ctx context.Context, id int32) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CertificatesFacade_DeleteCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCertificate'
type CertificatesFacade_DeleteCertificate_Call struct {
	*mock.Call
}

// DeleteCertificate is a helper method to define mock.On call
//  - ctx context.Context
//  - id int32
func (_e *CertificatesFacade_Expecter) DeleteCertificate(ctx interface{}, id interface{}) *CertificatesFacade_DeleteCertificate_Call {
	return &CertificatesFacade_DeleteCertificate_Call{Call: _e.mock.On("DeleteCertificate", ctx, id)}
}

func (_c *CertificatesFacade_DeleteCertificate_Call) Run(run func(ctx context.Context, id int32)) *CertificatesFacade_DeleteCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *CertificatesFacade_DeleteCertificate_Call) Return(_a0 error) *CertificatesFacade_DeleteCertificate_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetCertificate provides a mock function with given fields: ctx, id
func (_m *CertificatesFacade) GetCertificate(ctx context.Context, id int32) (model.Certificate, error) {
	ret := _m.Called(ctx, id)

	var r0 model.Certificate
	if rf, ok := ret.Get(0).(func(context.Context, int32) model.Certificate); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Certificate)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CertificatesFacade_GetCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCertificate'
type CertificatesFacade_GetCertificate_Call struct {
	*mock.Call
}

// GetCertificate is a helper method to define mock.On call
//  - ctx context.Context
//  - id int32
func (_e *CertificatesFacade_Expecter) GetCertificate(ctx interface{}, id interface{}) *CertificatesFacade_GetCertificate_Call {
	return &CertificatesFacade_GetCertificate_Call{Call: _e.mock.On("GetCertificate", ctx, id)}
}

func (_c *CertificatesFacade_GetCertificate_Call) Run(run func(ctx context.Context, id int32)) *CertificatesFacade_GetCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *CertificatesFacade_GetCertificate_Call) Return(_a0 model.Certificate, _a1 error) *CertificatesFacade_GetCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ListCertificates provides a mock function with given fields: ctx
func (_m *CertificatesFacade) ListCertificates(ctx context.Context) ([]model.Certificate, error) {
	ret := _m.Called(ctx)

	var r0 []model.Certificate
	if rf, ok := ret.Get(0).(func(context.Context) []model.Certificate); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Certificate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CertificatesFacade_ListCertificates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCertificates'
type CertificatesFacade_ListCertificates_Call struct {
	*mock.Call
}

// ListCertificates is a helper method to define mock.On call
//  - ctx context.Context
func (_e *CertificatesFacade_Expecter) ListCertificates(ctx interface{}) *CertificatesFacade_ListCertificates_Call {
	return &CertificatesFacade_ListCertificates_Call{Call: _e.mock.On("ListCertificates", ctx)}
}

func (_c *CertificatesFacade_ListCertificates_Call) Run(run func(ctx context.Context)) *CertificatesFacade_ListCertificates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *CertificatesFacade_ListCertificates_Call) Return(_a0 []model.Certificate, _a1 error) *CertificatesFacade_ListCertificates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchCertificate provides a mock function with given fields: ctx, certificate
func (_m *CertificatesFacade) PatchCertificate(ctx context.Context, certificate model.Certificate) (model.Certificate, error) {
	ret := _m.Called(ctx, certificate)

	var r0 model.Certificate
	if rf, ok := ret.Get(0).(func(context.Context, model.Certificate) model.Certificate); ok {
		r0 = rf(ctx, certificate)
	} else {
		r0 = ret.Get(0).(model.Certificate)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Certificate) error); ok {
		r1 = rf(ctx, certificate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CertificatesFacade_PatchCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchCertificate'
type CertificatesFacade_PatchCertificate_Call struct {
	*mock.Call
}

// PatchCertificate is a helper method to define mock.On call
//  - ctx context.Context
//  - certificate model.Certificate
func (_e *CertificatesFacade_Expecter) PatchCertificate(ctx interface{}, certificate interface{}) *CertificatesFacade_PatchCertificate_Call {
	return &CertificatesFacade_PatchCertificate_Call{Call: _e.mock.On("PatchCertificate", ctx, certificate)}
}

func (_c *CertificatesFacade_PatchCertificate_Call) Run(run func(ctx context.Context, certificate model.Certificate)) *CertificatesFacade_PatchCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Certificate))
	})
	return _c
}

func (_c *CertificatesFacade_PatchCertificate_Call) Return(_a0 model.Certificate, _a1 error) *CertificatesFacade_PatchCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewCertificatesFacade interface {
	mock.TestingT
	Cleanup(func())
}

// NewCertificatesFacade creates a new instance of CertificatesFacade. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCertificatesFacade(t mockConstructorTestingTNewCertificatesFacade) *CertificatesFacade {
	mock := &CertificatesFacade{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
