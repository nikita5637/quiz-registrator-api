// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// GamePlayersFacade is an autogenerated mock type for the GamePlayersFacade type
type GamePlayersFacade struct {
	mock.Mock
}

type GamePlayersFacade_Expecter struct {
	mock *mock.Mock
}

func (_m *GamePlayersFacade) EXPECT() *GamePlayersFacade_Expecter {
	return &GamePlayersFacade_Expecter{mock: &_m.Mock}
}

// PlayerRegisteredOnGame provides a mock function with given fields: ctx, gameID, userID
func (_m *GamePlayersFacade) PlayerRegisteredOnGame(ctx context.Context, gameID int32, userID int32) (bool, error) {
	ret := _m.Called(ctx, gameID, userID)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) (bool, error)); ok {
		return rf(ctx, gameID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) bool); ok {
		r0 = rf(ctx, gameID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, int32) error); ok {
		r1 = rf(ctx, gameID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GamePlayersFacade_PlayerRegisteredOnGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PlayerRegisteredOnGame'
type GamePlayersFacade_PlayerRegisteredOnGame_Call struct {
	*mock.Call
}

// PlayerRegisteredOnGame is a helper method to define mock.On call
//   - ctx context.Context
//   - gameID int32
//   - userID int32
func (_e *GamePlayersFacade_Expecter) PlayerRegisteredOnGame(ctx interface{}, gameID interface{}, userID interface{}) *GamePlayersFacade_PlayerRegisteredOnGame_Call {
	return &GamePlayersFacade_PlayerRegisteredOnGame_Call{Call: _e.mock.On("PlayerRegisteredOnGame", ctx, gameID, userID)}
}

func (_c *GamePlayersFacade_PlayerRegisteredOnGame_Call) Run(run func(ctx context.Context, gameID int32, userID int32)) *GamePlayersFacade_PlayerRegisteredOnGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32), args[2].(int32))
	})
	return _c
}

func (_c *GamePlayersFacade_PlayerRegisteredOnGame_Call) Return(_a0 bool, _a1 error) *GamePlayersFacade_PlayerRegisteredOnGame_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GamePlayersFacade_PlayerRegisteredOnGame_Call) RunAndReturn(run func(context.Context, int32, int32) (bool, error)) *GamePlayersFacade_PlayerRegisteredOnGame_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewGamePlayersFacade interface {
	mock.TestingT
	Cleanup(func())
}

// NewGamePlayersFacade creates a new instance of GamePlayersFacade. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGamePlayersFacade(t mockConstructorTestingTNewGamePlayersFacade) *GamePlayersFacade {
	mock := &GamePlayersFacade{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
