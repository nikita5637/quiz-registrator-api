// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/nikita5637/quiz-registrator-api/internal/pkg/model"
)

// GamesFacade is an autogenerated mock type for the GamesFacade type
type GamesFacade struct {
	mock.Mock
}

type GamesFacade_Expecter struct {
	mock *mock.Mock
}

func (_m *GamesFacade) EXPECT() *GamesFacade_Expecter {
	return &GamesFacade_Expecter{mock: &_m.Mock}
}

// CreateGame provides a mock function with given fields: ctx, _a1
func (_m *GamesFacade) CreateGame(ctx context.Context, _a1 model.Game) (model.Game, error) {
	ret := _m.Called(ctx, _a1)

	var r0 model.Game
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Game) (model.Game, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Game) model.Game); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(model.Game)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Game) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GamesFacade_CreateGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGame'
type GamesFacade_CreateGame_Call struct {
	*mock.Call
}

// CreateGame is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 model.Game
func (_e *GamesFacade_Expecter) CreateGame(ctx interface{}, _a1 interface{}) *GamesFacade_CreateGame_Call {
	return &GamesFacade_CreateGame_Call{Call: _e.mock.On("CreateGame", ctx, _a1)}
}

func (_c *GamesFacade_CreateGame_Call) Run(run func(ctx context.Context, _a1 model.Game)) *GamesFacade_CreateGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Game))
	})
	return _c
}

func (_c *GamesFacade_CreateGame_Call) Return(_a0 model.Game, _a1 error) *GamesFacade_CreateGame_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GamesFacade_CreateGame_Call) RunAndReturn(run func(context.Context, model.Game) (model.Game, error)) *GamesFacade_CreateGame_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGame provides a mock function with given fields: ctx, id
func (_m *GamesFacade) DeleteGame(ctx context.Context, id int32) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GamesFacade_DeleteGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGame'
type GamesFacade_DeleteGame_Call struct {
	*mock.Call
}

// DeleteGame is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *GamesFacade_Expecter) DeleteGame(ctx interface{}, id interface{}) *GamesFacade_DeleteGame_Call {
	return &GamesFacade_DeleteGame_Call{Call: _e.mock.On("DeleteGame", ctx, id)}
}

func (_c *GamesFacade_DeleteGame_Call) Run(run func(ctx context.Context, id int32)) *GamesFacade_DeleteGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *GamesFacade_DeleteGame_Call) Return(_a0 error) *GamesFacade_DeleteGame_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GamesFacade_DeleteGame_Call) RunAndReturn(run func(context.Context, int32) error) *GamesFacade_DeleteGame_Call {
	_c.Call.Return(run)
	return _c
}

// GetGameByID provides a mock function with given fields: ctx, id
func (_m *GamesFacade) GetGameByID(ctx context.Context, id int32) (model.Game, error) {
	ret := _m.Called(ctx, id)

	var r0 model.Game
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (model.Game, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) model.Game); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Game)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GamesFacade_GetGameByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGameByID'
type GamesFacade_GetGameByID_Call struct {
	*mock.Call
}

// GetGameByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *GamesFacade_Expecter) GetGameByID(ctx interface{}, id interface{}) *GamesFacade_GetGameByID_Call {
	return &GamesFacade_GetGameByID_Call{Call: _e.mock.On("GetGameByID", ctx, id)}
}

func (_c *GamesFacade_GetGameByID_Call) Run(run func(ctx context.Context, id int32)) *GamesFacade_GetGameByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *GamesFacade_GetGameByID_Call) Return(_a0 model.Game, _a1 error) *GamesFacade_GetGameByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GamesFacade_GetGameByID_Call) RunAndReturn(run func(context.Context, int32) (model.Game, error)) *GamesFacade_GetGameByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetGamesByIDs provides a mock function with given fields: ctx, ids
func (_m *GamesFacade) GetGamesByIDs(ctx context.Context, ids []int32) ([]model.Game, error) {
	ret := _m.Called(ctx, ids)

	var r0 []model.Game
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int32) ([]model.Game, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int32) []model.Game); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Game)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int32) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GamesFacade_GetGamesByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGamesByIDs'
type GamesFacade_GetGamesByIDs_Call struct {
	*mock.Call
}

// GetGamesByIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []int32
func (_e *GamesFacade_Expecter) GetGamesByIDs(ctx interface{}, ids interface{}) *GamesFacade_GetGamesByIDs_Call {
	return &GamesFacade_GetGamesByIDs_Call{Call: _e.mock.On("GetGamesByIDs", ctx, ids)}
}

func (_c *GamesFacade_GetGamesByIDs_Call) Run(run func(ctx context.Context, ids []int32)) *GamesFacade_GetGamesByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int32))
	})
	return _c
}

func (_c *GamesFacade_GetGamesByIDs_Call) Return(_a0 []model.Game, _a1 error) *GamesFacade_GetGamesByIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GamesFacade_GetGamesByIDs_Call) RunAndReturn(run func(context.Context, []int32) ([]model.Game, error)) *GamesFacade_GetGamesByIDs_Call {
	_c.Call.Return(run)
	return _c
}

// ListGames provides a mock function with given fields: ctx
func (_m *GamesFacade) ListGames(ctx context.Context) ([]model.Game, error) {
	ret := _m.Called(ctx)

	var r0 []model.Game
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Game, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Game); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Game)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GamesFacade_ListGames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGames'
type GamesFacade_ListGames_Call struct {
	*mock.Call
}

// ListGames is a helper method to define mock.On call
//   - ctx context.Context
func (_e *GamesFacade_Expecter) ListGames(ctx interface{}) *GamesFacade_ListGames_Call {
	return &GamesFacade_ListGames_Call{Call: _e.mock.On("ListGames", ctx)}
}

func (_c *GamesFacade_ListGames_Call) Run(run func(ctx context.Context)) *GamesFacade_ListGames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *GamesFacade_ListGames_Call) Return(_a0 []model.Game, _a1 error) *GamesFacade_ListGames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GamesFacade_ListGames_Call) RunAndReturn(run func(context.Context) ([]model.Game, error)) *GamesFacade_ListGames_Call {
	_c.Call.Return(run)
	return _c
}

// PatchGame provides a mock function with given fields: ctx, _a1
func (_m *GamesFacade) PatchGame(ctx context.Context, _a1 model.Game) (model.Game, error) {
	ret := _m.Called(ctx, _a1)

	var r0 model.Game
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Game) (model.Game, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Game) model.Game); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(model.Game)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Game) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GamesFacade_PatchGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchGame'
type GamesFacade_PatchGame_Call struct {
	*mock.Call
}

// PatchGame is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 model.Game
func (_e *GamesFacade_Expecter) PatchGame(ctx interface{}, _a1 interface{}) *GamesFacade_PatchGame_Call {
	return &GamesFacade_PatchGame_Call{Call: _e.mock.On("PatchGame", ctx, _a1)}
}

func (_c *GamesFacade_PatchGame_Call) Run(run func(ctx context.Context, _a1 model.Game)) *GamesFacade_PatchGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Game))
	})
	return _c
}

func (_c *GamesFacade_PatchGame_Call) Return(_a0 model.Game, _a1 error) *GamesFacade_PatchGame_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GamesFacade_PatchGame_Call) RunAndReturn(run func(context.Context, model.Game) (model.Game, error)) *GamesFacade_PatchGame_Call {
	_c.Call.Return(run)
	return _c
}

// SearchGamesByLeagueID provides a mock function with given fields: ctx, leagueID, offset, limit
func (_m *GamesFacade) SearchGamesByLeagueID(ctx context.Context, leagueID int32, offset uint64, limit uint64) ([]model.Game, uint64, error) {
	ret := _m.Called(ctx, leagueID, offset, limit)

	var r0 []model.Game
	var r1 uint64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, uint64, uint64) ([]model.Game, uint64, error)); ok {
		return rf(ctx, leagueID, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, uint64, uint64) []model.Game); ok {
		r0 = rf(ctx, leagueID, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Game)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, uint64, uint64) uint64); ok {
		r1 = rf(ctx, leagueID, offset, limit)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int32, uint64, uint64) error); ok {
		r2 = rf(ctx, leagueID, offset, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GamesFacade_SearchGamesByLeagueID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchGamesByLeagueID'
type GamesFacade_SearchGamesByLeagueID_Call struct {
	*mock.Call
}

// SearchGamesByLeagueID is a helper method to define mock.On call
//   - ctx context.Context
//   - leagueID int32
//   - offset uint64
//   - limit uint64
func (_e *GamesFacade_Expecter) SearchGamesByLeagueID(ctx interface{}, leagueID interface{}, offset interface{}, limit interface{}) *GamesFacade_SearchGamesByLeagueID_Call {
	return &GamesFacade_SearchGamesByLeagueID_Call{Call: _e.mock.On("SearchGamesByLeagueID", ctx, leagueID, offset, limit)}
}

func (_c *GamesFacade_SearchGamesByLeagueID_Call) Run(run func(ctx context.Context, leagueID int32, offset uint64, limit uint64)) *GamesFacade_SearchGamesByLeagueID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32), args[2].(uint64), args[3].(uint64))
	})
	return _c
}

func (_c *GamesFacade_SearchGamesByLeagueID_Call) Return(_a0 []model.Game, _a1 uint64, _a2 error) *GamesFacade_SearchGamesByLeagueID_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GamesFacade_SearchGamesByLeagueID_Call) RunAndReturn(run func(context.Context, int32, uint64, uint64) ([]model.Game, uint64, error)) *GamesFacade_SearchGamesByLeagueID_Call {
	_c.Call.Return(run)
	return _c
}

// SearchPassedAndRegisteredGames provides a mock function with given fields: ctx, offset, limit
func (_m *GamesFacade) SearchPassedAndRegisteredGames(ctx context.Context, offset uint64, limit uint64) ([]model.Game, uint64, error) {
	ret := _m.Called(ctx, offset, limit)

	var r0 []model.Game
	var r1 uint64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) ([]model.Game, uint64, error)); ok {
		return rf(ctx, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64) []model.Game); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Game)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, uint64) uint64); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uint64, uint64) error); ok {
		r2 = rf(ctx, offset, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GamesFacade_SearchPassedAndRegisteredGames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchPassedAndRegisteredGames'
type GamesFacade_SearchPassedAndRegisteredGames_Call struct {
	*mock.Call
}

// SearchPassedAndRegisteredGames is a helper method to define mock.On call
//   - ctx context.Context
//   - offset uint64
//   - limit uint64
func (_e *GamesFacade_Expecter) SearchPassedAndRegisteredGames(ctx interface{}, offset interface{}, limit interface{}) *GamesFacade_SearchPassedAndRegisteredGames_Call {
	return &GamesFacade_SearchPassedAndRegisteredGames_Call{Call: _e.mock.On("SearchPassedAndRegisteredGames", ctx, offset, limit)}
}

func (_c *GamesFacade_SearchPassedAndRegisteredGames_Call) Run(run func(ctx context.Context, offset uint64, limit uint64)) *GamesFacade_SearchPassedAndRegisteredGames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(uint64))
	})
	return _c
}

func (_c *GamesFacade_SearchPassedAndRegisteredGames_Call) Return(_a0 []model.Game, _a1 uint64, _a2 error) *GamesFacade_SearchPassedAndRegisteredGames_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GamesFacade_SearchPassedAndRegisteredGames_Call) RunAndReturn(run func(context.Context, uint64, uint64) ([]model.Game, uint64, error)) *GamesFacade_SearchPassedAndRegisteredGames_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewGamesFacade interface {
	mock.TestingT
	Cleanup(func())
}

// NewGamesFacade creates a new instance of GamesFacade. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGamesFacade(t mockConstructorTestingTNewGamesFacade) *GamesFacade {
	mock := &GamesFacade{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
