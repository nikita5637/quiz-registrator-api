// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/nikita5637/quiz-registrator-api/internal/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// UserRolesFacade is an autogenerated mock type for the UserRolesFacade type
type UserRolesFacade struct {
	mock.Mock
}

type UserRolesFacade_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRolesFacade) EXPECT() *UserRolesFacade_Expecter {
	return &UserRolesFacade_Expecter{mock: &_m.Mock}
}

// CreateUserRole provides a mock function with given fields: ctx, userRole
func (_m *UserRolesFacade) CreateUserRole(ctx context.Context, userRole model.UserRole) (model.UserRole, error) {
	ret := _m.Called(ctx, userRole)

	var r0 model.UserRole
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserRole) (model.UserRole, error)); ok {
		return rf(ctx, userRole)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.UserRole) model.UserRole); ok {
		r0 = rf(ctx, userRole)
	} else {
		r0 = ret.Get(0).(model.UserRole)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.UserRole) error); ok {
		r1 = rf(ctx, userRole)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRolesFacade_CreateUserRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserRole'
type UserRolesFacade_CreateUserRole_Call struct {
	*mock.Call
}

// CreateUserRole is a helper method to define mock.On call
//   - ctx context.Context
//   - userRole model.UserRole
func (_e *UserRolesFacade_Expecter) CreateUserRole(ctx interface{}, userRole interface{}) *UserRolesFacade_CreateUserRole_Call {
	return &UserRolesFacade_CreateUserRole_Call{Call: _e.mock.On("CreateUserRole", ctx, userRole)}
}

func (_c *UserRolesFacade_CreateUserRole_Call) Run(run func(ctx context.Context, userRole model.UserRole)) *UserRolesFacade_CreateUserRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserRole))
	})
	return _c
}

func (_c *UserRolesFacade_CreateUserRole_Call) Return(_a0 model.UserRole, _a1 error) *UserRolesFacade_CreateUserRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRolesFacade_CreateUserRole_Call) RunAndReturn(run func(context.Context, model.UserRole) (model.UserRole, error)) *UserRolesFacade_CreateUserRole_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserRole provides a mock function with given fields: ctx, id
func (_m *UserRolesFacade) DeleteUserRole(ctx context.Context, id int32) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRolesFacade_DeleteUserRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserRole'
type UserRolesFacade_DeleteUserRole_Call struct {
	*mock.Call
}

// DeleteUserRole is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *UserRolesFacade_Expecter) DeleteUserRole(ctx interface{}, id interface{}) *UserRolesFacade_DeleteUserRole_Call {
	return &UserRolesFacade_DeleteUserRole_Call{Call: _e.mock.On("DeleteUserRole", ctx, id)}
}

func (_c *UserRolesFacade_DeleteUserRole_Call) Run(run func(ctx context.Context, id int32)) *UserRolesFacade_DeleteUserRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *UserRolesFacade_DeleteUserRole_Call) Return(_a0 error) *UserRolesFacade_DeleteUserRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRolesFacade_DeleteUserRole_Call) RunAndReturn(run func(context.Context, int32) error) *UserRolesFacade_DeleteUserRole_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserRolesByUserID provides a mock function with given fields: ctx, userID
func (_m *UserRolesFacade) GetUserRolesByUserID(ctx context.Context, userID int32) ([]model.UserRole, error) {
	ret := _m.Called(ctx, userID)

	var r0 []model.UserRole
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]model.UserRole, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []model.UserRole); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.UserRole)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRolesFacade_GetUserRolesByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRolesByUserID'
type UserRolesFacade_GetUserRolesByUserID_Call struct {
	*mock.Call
}

// GetUserRolesByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int32
func (_e *UserRolesFacade_Expecter) GetUserRolesByUserID(ctx interface{}, userID interface{}) *UserRolesFacade_GetUserRolesByUserID_Call {
	return &UserRolesFacade_GetUserRolesByUserID_Call{Call: _e.mock.On("GetUserRolesByUserID", ctx, userID)}
}

func (_c *UserRolesFacade_GetUserRolesByUserID_Call) Run(run func(ctx context.Context, userID int32)) *UserRolesFacade_GetUserRolesByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *UserRolesFacade_GetUserRolesByUserID_Call) Return(_a0 []model.UserRole, _a1 error) *UserRolesFacade_GetUserRolesByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRolesFacade_GetUserRolesByUserID_Call) RunAndReturn(run func(context.Context, int32) ([]model.UserRole, error)) *UserRolesFacade_GetUserRolesByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserRoles provides a mock function with given fields: ctx
func (_m *UserRolesFacade) ListUserRoles(ctx context.Context) ([]model.UserRole, error) {
	ret := _m.Called(ctx)

	var r0 []model.UserRole
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.UserRole, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.UserRole); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.UserRole)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRolesFacade_ListUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserRoles'
type UserRolesFacade_ListUserRoles_Call struct {
	*mock.Call
}

// ListUserRoles is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UserRolesFacade_Expecter) ListUserRoles(ctx interface{}) *UserRolesFacade_ListUserRoles_Call {
	return &UserRolesFacade_ListUserRoles_Call{Call: _e.mock.On("ListUserRoles", ctx)}
}

func (_c *UserRolesFacade_ListUserRoles_Call) Run(run func(ctx context.Context)) *UserRolesFacade_ListUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UserRolesFacade_ListUserRoles_Call) Return(_a0 []model.UserRole, _a1 error) *UserRolesFacade_ListUserRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRolesFacade_ListUserRoles_Call) RunAndReturn(run func(context.Context) ([]model.UserRole, error)) *UserRolesFacade_ListUserRoles_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewUserRolesFacade interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRolesFacade creates a new instance of UserRolesFacade. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRolesFacade(t mockConstructorTestingTNewUserRolesFacade) *UserRolesFacade {
	mock := &UserRolesFacade{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
