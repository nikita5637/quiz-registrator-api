// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Reminder is an autogenerated mock type for the Reminder type
type Reminder struct {
	mock.Mock
}

type Reminder_Expecter struct {
	mock *mock.Mock
}

func (_m *Reminder) EXPECT() *Reminder_Expecter {
	return &Reminder_Expecter{mock: &_m.Mock}
}

// GetName provides a mock function with given fields:
func (_m *Reminder) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Reminder_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type Reminder_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *Reminder_Expecter) GetName() *Reminder_GetName_Call {
	return &Reminder_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *Reminder_GetName_Call) Run(run func()) *Reminder_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Reminder_GetName_Call) Return(_a0 string) *Reminder_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

// Run provides a mock function with given fields: ctx
func (_m *Reminder) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Reminder_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type Reminder_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//  - ctx context.Context
func (_e *Reminder_Expecter) Run(ctx interface{}) *Reminder_Run_Call {
	return &Reminder_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *Reminder_Run_Call) Run(run func(ctx context.Context)) *Reminder_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Reminder_Run_Call) Return(_a0 error) *Reminder_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewReminder interface {
	mock.TestingT
	Cleanup(func())
}

// NewReminder creates a new instance of Reminder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReminder(t mockConstructorTestingTNewReminder) *Reminder {
	mock := &Reminder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
