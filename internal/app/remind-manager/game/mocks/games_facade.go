// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/nikita5637/quiz-registrator-api/internal/pkg/model"
)

// GamesFacade is an autogenerated mock type for the GamesFacade type
type GamesFacade struct {
	mock.Mock
}

type GamesFacade_Expecter struct {
	mock *mock.Mock
}

func (_m *GamesFacade) EXPECT() *GamesFacade_Expecter {
	return &GamesFacade_Expecter{mock: &_m.Mock}
}

// GetPlayersByGameID provides a mock function with given fields: ctx, gameID
func (_m *GamesFacade) GetPlayersByGameID(ctx context.Context, gameID int32) ([]model.GamePlayer, error) {
	ret := _m.Called(ctx, gameID)

	var r0 []model.GamePlayer
	if rf, ok := ret.Get(0).(func(context.Context, int32) []model.GamePlayer); ok {
		r0 = rf(ctx, gameID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.GamePlayer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, gameID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GamesFacade_GetPlayersByGameID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlayersByGameID'
type GamesFacade_GetPlayersByGameID_Call struct {
	*mock.Call
}

// GetPlayersByGameID is a helper method to define mock.On call
//  - ctx context.Context
//  - gameID int32
func (_e *GamesFacade_Expecter) GetPlayersByGameID(ctx interface{}, gameID interface{}) *GamesFacade_GetPlayersByGameID_Call {
	return &GamesFacade_GetPlayersByGameID_Call{Call: _e.mock.On("GetPlayersByGameID", ctx, gameID)}
}

func (_c *GamesFacade_GetPlayersByGameID_Call) Run(run func(ctx context.Context, gameID int32)) *GamesFacade_GetPlayersByGameID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *GamesFacade_GetPlayersByGameID_Call) Return(_a0 []model.GamePlayer, _a1 error) *GamesFacade_GetPlayersByGameID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTodaysGames provides a mock function with given fields: ctx
func (_m *GamesFacade) GetTodaysGames(ctx context.Context) ([]model.Game, error) {
	ret := _m.Called(ctx)

	var r0 []model.Game
	if rf, ok := ret.Get(0).(func(context.Context) []model.Game); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GamesFacade_GetTodaysGames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTodaysGames'
type GamesFacade_GetTodaysGames_Call struct {
	*mock.Call
}

// GetTodaysGames is a helper method to define mock.On call
//  - ctx context.Context
func (_e *GamesFacade_Expecter) GetTodaysGames(ctx interface{}) *GamesFacade_GetTodaysGames_Call {
	return &GamesFacade_GetTodaysGames_Call{Call: _e.mock.On("GetTodaysGames", ctx)}
}

func (_c *GamesFacade_GetTodaysGames_Call) Run(run func(ctx context.Context)) *GamesFacade_GetTodaysGames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *GamesFacade_GetTodaysGames_Call) Return(_a0 []model.Game, _a1 error) *GamesFacade_GetTodaysGames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewGamesFacade interface {
	mock.TestingT
	Cleanup(func())
}

// NewGamesFacade creates a new instance of GamesFacade. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGamesFacade(t mockConstructorTestingTNewGamesFacade) *GamesFacade {
	mock := &GamesFacade{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
