// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// RabbitMQProducer is an autogenerated mock type for the RabbitMQProducer type
type RabbitMQProducer struct {
	mock.Mock
}

type RabbitMQProducer_Expecter struct {
	mock *mock.Mock
}

func (_m *RabbitMQProducer) EXPECT() *RabbitMQProducer_Expecter {
	return &RabbitMQProducer_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: ctx, message
func (_m *RabbitMQProducer) Send(ctx context.Context, message interface{}) error {
	ret := _m.Called(ctx, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RabbitMQProducer_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type RabbitMQProducer_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx context.Context
//   - message interface{}
func (_e *RabbitMQProducer_Expecter) Send(ctx interface{}, message interface{}) *RabbitMQProducer_Send_Call {
	return &RabbitMQProducer_Send_Call{Call: _e.mock.On("Send", ctx, message)}
}

func (_c *RabbitMQProducer_Send_Call) Run(run func(ctx context.Context, message interface{})) *RabbitMQProducer_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *RabbitMQProducer_Send_Call) Return(_a0 error) *RabbitMQProducer_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RabbitMQProducer_Send_Call) RunAndReturn(run func(context.Context, interface{}) error) *RabbitMQProducer_Send_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRabbitMQProducer interface {
	mock.TestingT
	Cleanup(func())
}

// NewRabbitMQProducer creates a new instance of RabbitMQProducer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRabbitMQProducer(t mockConstructorTestingTNewRabbitMQProducer) *RabbitMQProducer {
	mock := &RabbitMQProducer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
