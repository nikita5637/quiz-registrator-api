// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/nikita5637/quiz-registrator-api/internal/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// UsersFacade is an autogenerated mock type for the UsersFacade type
type UsersFacade struct {
	mock.Mock
}

type UsersFacade_Expecter struct {
	mock *mock.Mock
}

func (_m *UsersFacade) EXPECT() *UsersFacade_Expecter {
	return &UsersFacade_Expecter{mock: &_m.Mock}
}

// GetUserByTelegramID provides a mock function with given fields: ctx, telegramID
func (_m *UsersFacade) GetUserByTelegramID(ctx context.Context, telegramID int64) (model.User, error) {
	ret := _m.Called(ctx, telegramID)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(context.Context, int64) model.User); ok {
		r0 = rf(ctx, telegramID)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, telegramID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersFacade_GetUserByTelegramID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByTelegramID'
type UsersFacade_GetUserByTelegramID_Call struct {
	*mock.Call
}

// GetUserByTelegramID is a helper method to define mock.On call
//  - ctx context.Context
//  - telegramID int64
func (_e *UsersFacade_Expecter) GetUserByTelegramID(ctx interface{}, telegramID interface{}) *UsersFacade_GetUserByTelegramID_Call {
	return &UsersFacade_GetUserByTelegramID_Call{Call: _e.mock.On("GetUserByTelegramID", ctx, telegramID)}
}

func (_c *UsersFacade_GetUserByTelegramID_Call) Run(run func(ctx context.Context, telegramID int64)) *UsersFacade_GetUserByTelegramID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *UsersFacade_GetUserByTelegramID_Call) Return(_a0 model.User, _a1 error) *UsersFacade_GetUserByTelegramID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewUsersFacade interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsersFacade creates a new instance of UsersFacade. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsersFacade(t mockConstructorTestingTNewUsersFacade) *UsersFacade {
	mock := &UsersFacade{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
